<refentry id="libbonoboui-bonobo-control-frame">
<refmeta>
<refentrytitle role="top_of_page" id="libbonoboui-bonobo-control-frame.top_of_page">BonoboControlFrame</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBOUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboControlFrame</refname>
<refpurpose>An implementation of the container's frame containing a Control</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonoboui-bonobo-control-frame.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="BonoboControlFrame"/>
<synopsis>
                    <link linkend="BonoboControlFrame-struct">BonoboControlFrame</link>;
                    <link linkend="BonoboControlFramePrivate">BonoboControlFramePrivate</link>;
                    <link linkend="BonoboControlFrameClass">BonoboControlFrameClass</link>;
#define             <link linkend="BONOBO-CONTROL-FRAME-TOPLEVEL-PROP--CAPS">BONOBO_CONTROL_FRAME_TOPLEVEL_PROP</link>
<link linkend="BonoboControlFrame">BonoboControlFrame</link> * <link linkend="bonobo-control-frame-construct">bonobo_control_frame_construct</link>     (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> ui_container,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="BonoboControlFrame">BonoboControlFrame</link> * <link linkend="bonobo-control-frame-new">bonobo_control_frame_new</link>           (<link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> ui_container);
<link linkend="GtkWidget">GtkWidget</link> *         <link linkend="bonobo-control-frame-get-widget">bonobo_control_frame_get_widget</link>     (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *frame);
<link linkend="void">void</link>                <link linkend="bonobo-control-frame-set-ui-container">bonobo_control_frame_set_ui_container</link>
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> uic,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="void">void</link>                <link linkend="bonobo-control-frame-control-activate">bonobo_control_frame_control_activate</link>
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
<link linkend="void">void</link>                <link linkend="bonobo-control-frame-control-deactivate">bonobo_control_frame_control_deactivate</link>
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
<link linkend="void">void</link>                <link linkend="bonobo-control-frame-set-autoactivate">bonobo_control_frame_set_autoactivate</link>
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="gboolean">gboolean</link> autoactivate);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-control-frame-get-autoactivate">bonobo_control_frame_get_autoactivate</link>
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
<link linkend="Bonobo-PropertyBag">Bonobo_PropertyBag</link>  <link linkend="bonobo-control-frame-get-control-property-bag">bonobo_control_frame_get_control_property_bag</link>
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-control-frame-set-propbag">bonobo_control_frame_set_propbag</link>    (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="BonoboPropertyBag">BonoboPropertyBag</link> *propbag);
<link linkend="BonoboPropertyBag">BonoboPropertyBag</link> * <link linkend="bonobo-control-frame-get-propbag">bonobo_control_frame_get_propbag</link>    (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
<link linkend="void">void</link>                <link linkend="bonobo-control-frame-control-set-state">bonobo_control_frame_control_set_state</link>
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="GtkStateType">GtkStateType</link> state);
<link linkend="void">void</link>                <link linkend="bonobo-control-frame-set-autostate">bonobo_control_frame_set_autostate</link>  (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="gboolean">gboolean</link> autostate);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-control-frame-get-autostate">bonobo_control_frame_get_autostate</link>  (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
<link linkend="void">void</link>                <link linkend="bonobo-control-frame-bind-to-control">bonobo_control_frame_bind_to_control</link>
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="Bonobo-Control">Bonobo_Control</link> control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="Bonobo-Control">Bonobo_Control</link>      <link linkend="bonobo-control-frame-get-control">bonobo_control_frame_get_control</link>    (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
<link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link>  <link linkend="bonobo-control-frame-get-ui-container">bonobo_control_frame_get_ui_container</link>
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);
<link linkend="BonoboUIComponent">BonoboUIComponent</link> * <link linkend="bonobo-control-frame-get-popup-component">bonobo_control_frame_get_popup_component</link>
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libbonoboui-bonobo-control-frame.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="BonoboObject">BonoboObject</link>
         +----BonoboControlFrame
</synopsis>
</refsect1>






<refsect1 id="libbonoboui-bonobo-control-frame.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="BonoboControlFrame-activate-uri">activate-uri</link>&quot;                                   : Run Last
  &quot;<link linkend="BonoboControlFrame-activated">activated</link>&quot;                                      : Run Last
</synopsis>
</refsect1>


<refsect1 id="libbonoboui-bonobo-control-frame.description" role="desc">
<title role="desc.title">Description</title>
<para>
The BonoboControlFrame object is used to embed a Control. Most
people will want to use <link linkend="BonoboWidget"><type>BonoboWidget</type></link> instead of the control frame
since it provides lots of nice auxiliary features to make embedding
easy.
</para>
<figure id="control-frame-img">
    <title>The Bonobo::ControlFrame interface</title>
    <mediaobject>
	<imageobject>
	    <imagedata fileref="control-frame.png" format="PNG"/>
	</imageobject>
    </mediaobject>
</figure>
<para>
The control frame is coupled to an embedded control and is used
to allow the Control to communicate with its environment, particuarly
getting the <link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link> for merging its menu / toolbar
UI elements.
</para>
<para>
  <example>
    <title>A nice use of a BonoboControlFrame</title>
    <programlisting>
BonoboWidget *
bonobo_widget_construct_control_from_objref (BonoboWidget      *bw,
					     Bonobo_Control     control,
					     Bonobo_UIContainer uic)
{
	GtkWidget    *control_frame_widget;
	/*
	 * Create a local ControlFrame for it.
	 */
	bw->priv->control_frame = bonobo_control_frame_new (uic);
	bonobo_control_frame_bind_to_control (bw->priv->control_frame, control);
	...
	bonobo_control_frame_set_autoactivate (bw->priv->control_frame, TRUE);
	/*
	 * Grab the actual widget which visually contains the remote
	 * Control.  This is a GtkSocket, in reality.
	 */
	control_frame_widget = bonobo_control_frame_get_widget (bw->priv->control_frame);
	/*
	 * Now stick it into this BonoboWidget.
	 */
	gtk_container_add (GTK_CONTAINER (bw),
			   control_frame_widget);
	/*
	 * Always remember to show the widget before reporting bugs.
	 */
	gtk_widget_show (control_frame_widget);
	if (uic != CORBA_OBJECT_NIL)
		bw->priv->uic = bonobo_object_dup_ref (uic, NULL);
	return bw;
}
    </programlisting>
  </example>
</para>
</refsect1>

<refsect1 id="libbonoboui-bonobo-control-frame.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="BonoboControlFrame-struct" role="struct">
<title>BonoboControlFrame</title>
<indexterm zone="BonoboControlFrame-struct"><primary sortas="BonoboControlFrame">BonoboControlFrame</primary></indexterm><programlisting>typedef struct _BonoboControlFrame BonoboControlFrame;</programlisting>
<para>
</para></refsect2>
<refsect2 id="BonoboControlFramePrivate" role="struct">
<title>BonoboControlFramePrivate</title>
<indexterm zone="BonoboControlFramePrivate"><primary sortas="BonoboControlFramePrivate">BonoboControlFramePrivate</primary></indexterm><programlisting>typedef struct _BonoboControlFramePrivate BonoboControlFramePrivate;</programlisting>
<para>
</para></refsect2>
<refsect2 id="BonoboControlFrameClass" role="struct">
<title>BonoboControlFrameClass</title>
<indexterm zone="BonoboControlFrameClass"><primary sortas="BonoboControlFrameClass">BonoboControlFrameClass</primary></indexterm><programlisting>typedef struct {
	BonoboObjectClass parent_class;

	POA_Bonobo_ControlFrame__epv epv;

	gpointer dummy[4];

	/* Signals. */
	void (*activated)           (BonoboControlFrame *control_frame, gboolean state);
	void (*activate_uri)        (BonoboControlFrame *control_frame, const char *uri, gboolean relative);
} BonoboControlFrameClass;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="BONOBO-CONTROL-FRAME-TOPLEVEL-PROP--CAPS" role="macro">
<title>BONOBO_CONTROL_FRAME_TOPLEVEL_PROP</title>
<indexterm zone="BONOBO-CONTROL-FRAME-TOPLEVEL-PROP--CAPS"><primary sortas="BONOBO_CONTROL_FRAME_TOPLEVEL_PROP">BONOBO_CONTROL_FRAME_TOPLEVEL_PROP</primary></indexterm><programlisting>#define BONOBO_CONTROL_FRAME_TOPLEVEL_PROP "bonobo:toplevel"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="bonobo-control-frame-construct" role="function">
<title>bonobo_control_frame_construct ()</title>
<indexterm zone="bonobo-control-frame-construct"><primary sortas="bonobo_control_frame_construct">bonobo_control_frame_construct</primary></indexterm><programlisting><link linkend="BonoboControlFrame">BonoboControlFrame</link> * bonobo_control_frame_construct     (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> ui_container,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Initializes <parameter>control_frame</parameter> with the parameters.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="BonoboControlFrame"><type>BonoboControlFrame</type></link> object to be initialized.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ui_container</parameter>&#160;:</term>
<listitem><simpara> A CORBA object for the UIContainer for the container application.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the initialized BonoboControlFrame object <parameter>control_frame</parameter> that implements the
Bonobo::ControlFrame CORBA service.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-new" role="function">
<title>bonobo_control_frame_new ()</title>
<indexterm zone="bonobo-control-frame-new"><primary sortas="bonobo_control_frame_new">bonobo_control_frame_new</primary></indexterm><programlisting><link linkend="BonoboControlFrame">BonoboControlFrame</link> * bonobo_control_frame_new           (<link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> ui_container);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ui_container</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="Bonobo-UIContainer"><type>Bonobo_UIContainer</type></link> for the container application.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> BonoboControlFrame object that implements the
Bonobo::ControlFrame CORBA service. 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-get-widget" role="function">
<title>bonobo_control_frame_get_widget ()</title>
<indexterm zone="bonobo-control-frame-get-widget"><primary sortas="bonobo_control_frame_get_widget">bonobo_control_frame_get_widget</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link> *         bonobo_control_frame_get_widget     (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *frame);</programlisting>
<para>
Use this function when you want to embed a BonoboControl into your
container's widget hierarchy.  Once you have bound the
BonoboControlFrame to a remote BonoboControl, place the widget
returned by <link linkend="bonobo-control-frame-get-widget"><function>bonobo_control_frame_get_widget()</function></link> into your widget
hierarchy and the control will appear in your application.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>frame</parameter>&#160;:</term>
<listitem><simpara> The BonoboControlFrame whose widget is being requested.a
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A GtkWidget which has the remote BonoboControl physically
inside it.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-set-ui-container" role="function">
<title>bonobo_control_frame_set_ui_container ()</title>
<indexterm zone="bonobo-control-frame-set-ui-container"><primary sortas="bonobo_control_frame_set_ui_container">bonobo_control_frame_set_ui_container</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_frame_set_ui_container
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> uic,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Associates a new <link linkend="Bonobo-UIContainer"><literal>Bonobo_UIContainer</literal></link> object with this ControlFrame. This
is only allowed while the Control is deactivated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uic</parameter>&#160;:</term>
<listitem><simpara> A Bonobo_UIContainer object reference.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-control-activate" role="function">
<title>bonobo_control_frame_control_activate ()</title>
<indexterm zone="bonobo-control-frame-control-activate"><primary sortas="bonobo_control_frame_control_activate">bonobo_control_frame_control_activate</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_frame_control_activate
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
Activates the BonoboControl embedded in <parameter>control_frame</parameter> by calling the
<link linkend="activate"><function>activate()</function></link> <link linkend="Bonobo-Control"><type>Bonobo_Control</type></link> interface method on it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara> The BonoboControlFrame object whose control should be
activated.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-control-deactivate" role="function">
<title>bonobo_control_frame_control_deactivate ()</title>
<indexterm zone="bonobo-control-frame-control-deactivate"><primary sortas="bonobo_control_frame_control_deactivate">bonobo_control_frame_control_deactivate</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_frame_control_deactivate
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
Deactivates the BonoboControl embedded in <parameter>frame</parameter> by calling
the <link linkend="activate"><function>activate()</function></link> CORBA method on it with the parameter <link linkend="FALSE--CAPS"><literal>FALSE</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara> The BonoboControlFrame object whose control should be
deactivated.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-set-autoactivate" role="function">
<title>bonobo_control_frame_set_autoactivate ()</title>
<indexterm zone="bonobo-control-frame-set-autoactivate"><primary sortas="bonobo_control_frame_set_autoactivate">bonobo_control_frame_set_autoactivate</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_frame_set_autoactivate
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="gboolean">gboolean</link> autoactivate);</programlisting>
<para>
Modifies the autoactivate behavior of <parameter>frame</parameter>.  If
<parameter>frame</parameter> is set to autoactivate, then it will automatically
send an "activate" message to the Control to which it is bound when
it gets a focus-in event, and a "deactivate" message when it gets a
focus-out event.  Autoactivation is off by default.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>autoactivate</parameter>&#160;:</term>
<listitem><simpara> A flag which indicates whether or not the
ControlFrame should automatically perform activation on the Control
to which it is bound.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-get-autoactivate" role="function">
<title>bonobo_control_frame_get_autoactivate ()</title>
<indexterm zone="bonobo-control-frame-get-autoactivate"><primary sortas="bonobo_control_frame_get_autoactivate">bonobo_control_frame_get_autoactivate</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_control_frame_get_autoactivate
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A boolean which indicates whether or not <parameter>frame</parameter> is
set to automatically activate its Control.  See
<link linkend="bonobo-control-frame-set-autoactivate"><function>bonobo_control_frame_set_autoactivate()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-get-control-property-bag" role="function">
<title>bonobo_control_frame_get_control_property_bag ()</title>
<indexterm zone="bonobo-control-frame-get-control-property-bag"><primary sortas="bonobo_control_frame_get_control_property_bag">bonobo_control_frame_get_control_property_bag</primary></indexterm><programlisting><link linkend="Bonobo-PropertyBag">Bonobo_PropertyBag</link>  bonobo_control_frame_get_control_property_bag
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This retrives a Bonobo_PropertyBag reference from its
associated Bonobo Control</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> CORBA property bag reference or CORBA_OBJECT_NIL
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-set-propbag" role="function">
<title>bonobo_control_frame_set_propbag ()</title>
<indexterm zone="bonobo-control-frame-set-propbag"><primary sortas="bonobo_control_frame_set_propbag">bonobo_control_frame_set_propbag</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_frame_set_propbag    (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="BonoboPropertyBag">BonoboPropertyBag</link> *propbag);</programlisting>
<para>
Makes <parameter>frame</parameter> use <parameter>propbag</parameter> for its ambient properties.  When
<parameter>frame</parameter>'s Control requests the ambient properties, it will
get them from <parameter>propbag</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>propbag</parameter>&#160;:</term>
<listitem><simpara> A BonoboPropertyBag which will hold <parameter>frame</parameter>'s
ambient properties.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-get-propbag" role="function">
<title>bonobo_control_frame_get_propbag ()</title>
<indexterm zone="bonobo-control-frame-get-propbag"><primary sortas="bonobo_control_frame_get_propbag">bonobo_control_frame_get_propbag</primary></indexterm><programlisting><link linkend="BonoboPropertyBag">BonoboPropertyBag</link> * bonobo_control_frame_get_propbag    (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The BonoboPropertyBag object which has been associated with
<parameter>frame</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-control-set-state" role="function">
<title>bonobo_control_frame_control_set_state ()</title>
<indexterm zone="bonobo-control-frame-control-set-state"><primary sortas="bonobo_control_frame_control_set_state">bonobo_control_frame_control_set_state</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_frame_control_set_state
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="GtkStateType">GtkStateType</link> state);</programlisting>
<para>
Proxies <parameter>state</parameter> to the control bound to <parameter>frame</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GtkStateType"><type>GtkStateType</type></link> value, specifying the widget state to apply
to the remote control.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-set-autostate" role="function">
<title>bonobo_control_frame_set_autostate ()</title>
<indexterm zone="bonobo-control-frame-set-autostate"><primary sortas="bonobo_control_frame_set_autostate">bonobo_control_frame_set_autostate</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_frame_set_autostate  (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="gboolean">gboolean</link> autostate);</programlisting>
<para>
Changes whether or not <parameter>frame</parameter> automatically proxies
state changes to its associated control.  The default mode
is for the control frame to autopropagate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>autostate</parameter>&#160;:</term>
<listitem><simpara> Whether or not GtkWidget state changes should be
automatically propagated down to the Control.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-get-autostate" role="function">
<title>bonobo_control_frame_get_autostate ()</title>
<indexterm zone="bonobo-control-frame-get-autostate"><primary sortas="bonobo_control_frame_get_autostate">bonobo_control_frame_get_autostate</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_control_frame_get_autostate  (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Whether or not this control frame will automatically
proxy GtkState changes to its associated Control.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-bind-to-control" role="function">
<title>bonobo_control_frame_bind_to_control ()</title>
<indexterm zone="bonobo-control-frame-bind-to-control"><primary sortas="bonobo_control_frame_bind_to_control">bonobo_control_frame_bind_to_control</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_frame_bind_to_control
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="Bonobo-Control">Bonobo_Control</link> control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
Associates <parameter>control</parameter> with this <parameter>frame</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> The CORBA object for the BonoboControl embedded
in this BonoboControlFrame.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> Optional exception environment
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-get-control" role="function">
<title>bonobo_control_frame_get_control ()</title>
<indexterm zone="bonobo-control-frame-get-control"><primary sortas="bonobo_control_frame_get_control">bonobo_control_frame_get_control</primary></indexterm><programlisting><link linkend="Bonobo-Control">Bonobo_Control</link>      bonobo_control_frame_get_control    (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The Bonobo_Control CORBA interface for the remote Control
which is bound to <parameter>frame</parameter>.  See also
<link linkend="bonobo-control-frame-bind-to-control"><function>bonobo_control_frame_bind_to_control()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-get-ui-container" role="function">
<title>bonobo_control_frame_get_ui_container ()</title>
<indexterm zone="bonobo-control-frame-get-ui-container"><primary sortas="bonobo_control_frame_get_ui_container">bonobo_control_frame_get_ui_container</primary></indexterm><programlisting><link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link>  bonobo_control_frame_get_ui_container
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The Bonobo_UIContainer object reference associated with this
ControlFrame.  This ui_container is specified when the ControlFrame is
created.  See <link linkend="bonobo-control-frame-new"><function>bonobo_control_frame_new()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-frame-get-popup-component" role="function">
<title>bonobo_control_frame_get_popup_component ()</title>
<indexterm zone="bonobo-control-frame-get-popup-component"><primary sortas="bonobo_control_frame_get_popup_component">bonobo_control_frame_get_popup_component</primary></indexterm><programlisting><link linkend="BonoboUIComponent">BonoboUIComponent</link> * bonobo_control_frame_get_popup_component
                                                        (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *control_frame,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="libbonoboui-bonobo-control-frame.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="BonoboControlFrame-activate-uri" role="signal"><title>The <literal>&quot;activate-uri&quot;</literal> signal</title>
<indexterm zone="BonoboControlFrame-activate-uri"><primary sortas="BonoboControlFrame::activate-uri">BonoboControlFrame::activate-uri</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *bonobocontrolframe,
                                                        <link linkend="gchar">gchar</link>              *arg1,
                                                        <link linkend="gboolean">gboolean</link>            arg2,
                                                        <link linkend="gpointer">gpointer</link>            user_data)               : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bonobocontrolframe</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="BonoboControlFrame-activated" role="signal"><title>The <literal>&quot;activated&quot;</literal> signal</title>
<indexterm zone="BonoboControlFrame-activated"><primary sortas="BonoboControlFrame::activated">BonoboControlFrame::activated</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="BonoboControlFrame">BonoboControlFrame</link> *bonobocontrolframe,
                                                        <link linkend="gboolean">gboolean</link>            arg1,
                                                        <link linkend="gpointer">gpointer</link>            user_data)               : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bonobocontrolframe</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1 id="libbonoboui-bonobo-control-frame.see-also">
<title>See Also</title>
<para>
  <link linkend="BonoboWidget"><type>BonoboWidget</type></link>, <link linkend="bonobo-widget-new"><function>bonobo_widget_new()</function></link>
</para>
</refsect1>

</refentry>
