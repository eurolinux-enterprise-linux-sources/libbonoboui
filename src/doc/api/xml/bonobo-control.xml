<refentry id="libbonoboui-bonobo-control">
<refmeta>
<refentrytitle role="top_of_page" id="libbonoboui-bonobo-control.top_of_page">BonoboControl</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBOUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboControl</refname>
<refpurpose>An implementation of the control interface for GtkWidgets</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonoboui-bonobo-control.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="BonoboControl"/>
<synopsis>
                    <link linkend="BonoboControl-struct">BonoboControl</link>;
                    <link linkend="BonoboControlPrivate">BonoboControlPrivate</link>;
                    <link linkend="BonoboControlClass">BonoboControlClass</link>;
<link linkend="BonoboControl">BonoboControl</link> *     <link linkend="bonobo-control-new">bonobo_control_new</link>                  (<link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="GtkWidget">GtkWidget</link> *         <link linkend="bonobo-control-get-widget">bonobo_control_get_widget</link>           (<link linkend="BonoboControl">BonoboControl</link> *control);
<link linkend="void">void</link>                <link linkend="bonobo-control-set-automerge">bonobo_control_set_automerge</link>        (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="gboolean">gboolean</link> automerge);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-control-get-automerge">bonobo_control_get_automerge</link>        (<link linkend="BonoboControl">BonoboControl</link> *control);
<link linkend="void">void</link>                <link linkend="bonobo-control-set-property">bonobo_control_set_property</link>         (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev,
                                                         const <link linkend="char">char</link> *first_prop,
                                                         ...);
<link linkend="void">void</link>                <link linkend="bonobo-control-get-property">bonobo_control_get_property</link>         (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev,
                                                         const <link linkend="char">char</link> *first_prop,
                                                         ...);
<link linkend="void">void</link>                <link linkend="bonobo-control-set-transient-for">bonobo_control_set_transient_for</link>    (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="GtkWindow">GtkWindow</link> *window,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-control-unset-transient-for">bonobo_control_unset_transient_for</link>  (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="GtkWindow">GtkWindow</link> *window,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="BonoboControl">BonoboControl</link> *     <link linkend="bonobo-control-construct">bonobo_control_construct</link>            (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="GtkWidget">GtkWidget</link> *widget);
<link linkend="BonoboUIComponent">BonoboUIComponent</link> * <link linkend="bonobo-control-get-ui-component">bonobo_control_get_ui_component</link>     (<link linkend="BonoboControl">BonoboControl</link> *control);
<link linkend="void">void</link>                <link linkend="bonobo-control-set-ui-component">bonobo_control_set_ui_component</link>     (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="BonoboUIComponent">BonoboUIComponent</link> *component);
<link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link>  <link linkend="bonobo-control-get-remote-ui-container">bonobo_control_get_remote_ui_container</link>
                                                        (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-control-set-control-frame">bonobo_control_set_control_frame</link>    (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="Bonobo-ControlFrame">Bonobo_ControlFrame</link> control_frame,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="Bonobo-ControlFrame">Bonobo_ControlFrame</link>  <link linkend="bonobo-control-get-control-frame">bonobo_control_get_control_frame</link>   (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-control-set-properties">bonobo_control_set_properties</link>       (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="Bonobo-PropertyBag">Bonobo_PropertyBag</link> pb,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="Bonobo-PropertyBag">Bonobo_PropertyBag</link>  <link linkend="bonobo-control-get-properties">bonobo_control_get_properties</link>       (<link linkend="BonoboControl">BonoboControl</link> *control);
<link linkend="Bonobo-PropertyBag">Bonobo_PropertyBag</link>  <link linkend="bonobo-control-get-ambient-properties">bonobo_control_get_ambient_properties</link>
                                                        (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-control-activate-notify">bonobo_control_activate_notify</link>      (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="gboolean">gboolean</link> activated,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="Bonobo-Gdk-WindowId">Bonobo_Gdk_WindowId</link>  <link linkend="bonobo-control-window-id-from-x11">bonobo_control_window_id_from_x11</link>  (<link linkend="guint32">guint32</link> x11_id);
<link linkend="guint32">guint32</link>             <link linkend="bonobo-control-x11-from-window-id">bonobo_control_x11_from_window_id</link>   (const <link linkend="CORBA-char">CORBA_char</link> *id);
#define             <link linkend="bonobo-control-windowid-from-x11">bonobo_control_windowid_from_x11</link>    (a)
#define             <link linkend="BONOBO-CONTROL-POPUP-BUTTON1--CAPS">BONOBO_CONTROL_POPUP_BUTTON1</link>
#define             <link linkend="BONOBO-CONTROL-POPUP-BUTTON2--CAPS">BONOBO_CONTROL_POPUP_BUTTON2</link>
#define             <link linkend="BONOBO-CONTROL-POPUP-BUTTON3--CAPS">BONOBO_CONTROL_POPUP_BUTTON3</link>
<link linkend="BonoboUIContainer">BonoboUIContainer</link> * <link linkend="bonobo-control-get-popup-ui-container">bonobo_control_get_popup_ui_container</link>
                                                        (<link linkend="BonoboControl">BonoboControl</link> *control);
<link linkend="BonoboUIComponent">BonoboUIComponent</link> * <link linkend="bonobo-control-get-popup-ui-component">bonobo_control_get_popup_ui_component</link>
                                                        (<link linkend="BonoboControl">BonoboControl</link> *control);
<link linkend="void">void</link>                <link linkend="bonobo-control-set-popup-ui-container">bonobo_control_set_popup_ui_container</link>
                                                        (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="BonoboUIContainer">BonoboUIContainer</link> *ui_container);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-control-do-popup">bonobo_control_do_popup</link>             (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="guint">guint</link> button,
                                                         <link linkend="guint32">guint32</link> activate_time);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-control-do-popup-full">bonobo_control_do_popup_full</link>        (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="GtkWidget">GtkWidget</link> *parent_menu_shell,
                                                         <link linkend="GtkWidget">GtkWidget</link> *parent_menu_item,
                                                         <link linkend="GtkMenuPositionFunc">GtkMenuPositionFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="guint">guint</link> button,
                                                         <link linkend="guint32">guint32</link> activate_time);
<link linkend="void">void</link>                (<link linkend="BonoboControlLifeCallback">*BonoboControlLifeCallback</link>)        (void);
<link linkend="void">void</link>                <link linkend="bonobo-control-life-set-purge">bonobo_control_life_set_purge</link>       (long <link linkend="ms">ms</link> );
<link linkend="void">void</link>                <link linkend="bonobo-control-life-set-callback">bonobo_control_life_set_callback</link>    (<link linkend="BonoboControlLifeCallback">BonoboControlLifeCallback</link> all_dead_callback);
<link linkend="void">void</link>                <link linkend="bonobo-control-life-instrument">bonobo_control_life_instrument</link>      (<link linkend="BonoboControl">BonoboControl</link> *control);
<link linkend="int">int</link>                 <link linkend="bonobo-control-life-get-count">bonobo_control_life_get_count</link>       (void);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libbonoboui-bonobo-control.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="BonoboObject">BonoboObject</link>
         +----BonoboControl
</synopsis>
</refsect1>






<refsect1 id="libbonoboui-bonobo-control.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="BonoboControl-activate">activate</link>&quot;                                       : Run Last
  &quot;<link linkend="BonoboControl-disconnected">disconnected</link>&quot;                                   : Run Last
  &quot;<link linkend="BonoboControl-plug-created">plug-created</link>&quot;                                   : Run Last
  &quot;<link linkend="BonoboControl-set-frame">set-frame</link>&quot;                                      : Run Last
</synopsis>
</refsect1>


<refsect1 id="libbonoboui-bonobo-control.description" role="desc">
<title role="desc.title">Description</title>
<para>
The BonoboControl object implements the CORBA interface for
handling remote embeddable components. A Control is a light
weight, single view, arbitrarily complex 'widget'. Controls
typicaly expose much of their functionality through a
property bag.
</para>
<figure id="control-img">
    <title>The Bonobo::Control interface</title>
    <mediaobject>
	<imageobject>
	    <imagedata fileref="control.png" format="PNG"/>
	</imageobject>
    </mediaobject>
</figure>
<para>
A BonoboControl provides the server ( or component ) side
implementation of a Control. The client that uses this
control will probably use a <link linkend="BonoboWidget"><type>BonoboWidget</type></link> to use the control
in their program.
</para>
<para>
</para>
<para>
If you want to expose your widget as a control it is very simple
  <example>
    <title>CORBA-ifying your GtkWidget</title>
    <programlisting>
BonoboControl *control;
GtkWidget     *widget;
Bonobo_Unknown corba_object;
widget = make_my_widget ();
gtk_widget_show (widget);
control = bonobo_control_new (widget);
corba_object = BONOBO_OBJREF (control);
    </programlisting>
  </example>
  The corba_object can then be passed off down the wire to anyone
and the control popped into a <link linkend="BonoboWidget"><type>BonoboWidget</type></link> or <link linkend="BonoboControlFrame"><type>BonoboControlFrame</type></link>
at the other end. Here is an even less useful example
  <example>
    <title>A pretty useless Control</title>
    <programlisting>
GtkWidget *widget;
widget = gtk_button_new_with_label ("My Control");
gtk_widget_show (widget);
return bonobo_control_new (widget);
    </programlisting>
  </example>
  If you learn only one thing from this example, it should be that
you need to do a gtk_widget_show on your control. It is not
sufficient to do a gtk_widget_show_all on the top level of the
client side, since this will not ( and should not ) propagate
over to the Control.
</para>
<para>
One final thing worth thinking about is activation. When a control
is embedded inside a <link linkend="BonoboControlFrame"><type>BonoboControlFrame</type></link>, it is initialy inactive.
In order for the control to recieve interactive input it is neccessary
to use bonobo_control_frame_activate. This signals to the control
that it is activated, at which point the Control should merge any
UI elements it has with the associated <link linkend="BonoboUIComponent"><type>BonoboUIComponent</type></link>. This
needs to be done every time the control is activated.
</para>
</refsect1>

<refsect1 id="libbonoboui-bonobo-control.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="BonoboControl-struct" role="struct">
<title>BonoboControl</title>
<indexterm zone="BonoboControl-struct"><primary sortas="BonoboControl">BonoboControl</primary></indexterm><programlisting>typedef struct _BonoboControl BonoboControl;</programlisting>
<para>
</para></refsect2>
<refsect2 id="BonoboControlPrivate" role="struct">
<title>BonoboControlPrivate</title>
<indexterm zone="BonoboControlPrivate"><primary sortas="BonoboControlPrivate">BonoboControlPrivate</primary></indexterm><programlisting>typedef struct _BonoboControlPrivate BonoboControlPrivate;</programlisting>
<para>
</para></refsect2>
<refsect2 id="BonoboControlClass" role="struct">
<title>BonoboControlClass</title>
<indexterm zone="BonoboControlClass"><primary sortas="BonoboControlClass">BonoboControlClass</primary></indexterm><programlisting>typedef struct {
	BonoboObjectClass      parent_class;

	POA_Bonobo_Control__epv epv;

	gpointer dummy[2];

	/* Signals. */
	void (*plug_created)   (BonoboControl *control);
	void (*disconnected)   (BonoboControl *control);
	void (*set_frame)      (BonoboControl *control);
	void (*activate)       (BonoboControl *control, gboolean state);
} BonoboControlClass;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="bonobo-control-new" role="function">
<title>bonobo_control_new ()</title>
<indexterm zone="bonobo-control-new"><primary sortas="bonobo_control_new">bonobo_control_new</primary></indexterm><programlisting><link linkend="BonoboControl">BonoboControl</link> *     bonobo_control_new                  (<link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
This function creates a new BonoboControl object for <parameter>widget</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara> a GTK widget that contains the control and will be passed to the
container process.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a BonoboControl object that implements the Bonobo::Control CORBA
service that will transfer the <parameter>widget</parameter> to the container process.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-get-widget" role="function">
<title>bonobo_control_get_widget ()</title>
<indexterm zone="bonobo-control-get-widget"><primary sortas="bonobo_control_get_widget">bonobo_control_get_widget</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link> *         bonobo_control_get_widget           (<link linkend="BonoboControl">BonoboControl</link> *control);</programlisting>
<para>
Returns the GtkWidget associated with a BonoboControl.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> a BonoboControl
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the BonoboControl's widget
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-set-automerge" role="function">
<title>bonobo_control_set_automerge ()</title>
<indexterm zone="bonobo-control-set-automerge"><primary sortas="bonobo_control_set_automerge">bonobo_control_set_automerge</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_set_automerge        (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="gboolean">gboolean</link> automerge);</programlisting>
<para>
Sets whether or not the control handles menu/toolbar merging
automatically.  If automerge is on, the control will automatically
register its BonoboUIComponent with the remote BonoboUIContainer
when it is activated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="BonoboControl"><type>BonoboControl</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>automerge</parameter>&#160;:</term>
<listitem><simpara> Whether or not menus and toolbars should be
automatically merged when the control is activated.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-get-automerge" role="function">
<title>bonobo_control_get_automerge ()</title>
<indexterm zone="bonobo-control-get-automerge"><primary sortas="bonobo_control_get_automerge">bonobo_control_get_automerge</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_control_get_automerge        (<link linkend="BonoboControl">BonoboControl</link> *control);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="BonoboControl"><type>BonoboControl</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Whether or not the control is set to automerge its
menus/toolbars.  See <link linkend="bonobo-control-set-automerge"><function>bonobo_control_set_automerge()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-set-property" role="function">
<title>bonobo_control_set_property ()</title>
<indexterm zone="bonobo-control-set-property"><primary sortas="bonobo_control_set_property">bonobo_control_set_property</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_set_property         (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev,
                                                         const <link linkend="char">char</link> *first_prop,
                                                         ...);</programlisting>
<para>
This method takes a NULL terminated list of name, type, value
triplicates, and sets the corresponding values on the control's
associated property bag.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> the control with associated property bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> optional corba exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_prop</parameter>&#160;:</term>
<listitem><simpara> the first property's name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-get-property" role="function">
<title>bonobo_control_get_property ()</title>
<indexterm zone="bonobo-control-get-property"><primary sortas="bonobo_control_get_property">bonobo_control_get_property</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_get_property         (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev,
                                                         const <link linkend="char">char</link> *first_prop,
                                                         ...);</programlisting>
<para>
This method takes a NULL terminated list of name, type, value
triplicates, and fetches the corresponding values on the control's
associated property bag.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> the control with associated property bag
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> optional corba exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_prop</parameter>&#160;:</term>
<listitem><simpara> the first property's name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-set-transient-for" role="function">
<title>bonobo_control_set_transient_for ()</title>
<indexterm zone="bonobo-control-set-transient-for"><primary sortas="bonobo_control_set_transient_for">bonobo_control_set_transient_for</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_set_transient_for    (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="GtkWindow">GtkWindow</link> *window,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
Attempts to make the <parameter>window</parameter> transient for the toplevel
of any associated controlframe the BonoboControl may have.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> a control with associated control frame
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>window</parameter>&#160;:</term>
<listitem><simpara> a window upon which to set the transient window.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-unset-transient-for" role="function">
<title>bonobo_control_unset_transient_for ()</title>
<indexterm zone="bonobo-control-unset-transient-for"><primary sortas="bonobo_control_unset_transient_for">bonobo_control_unset_transient_for</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_unset_transient_for  (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="GtkWindow">GtkWindow</link> *window,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> a control with associated control frame
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>window</parameter>&#160;:</term>
<listitem><simpara> a window upon which to unset the transient window.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-construct" role="function">
<title>bonobo_control_construct ()</title>
<indexterm zone="bonobo-control-construct"><primary sortas="bonobo_control_construct">bonobo_control_construct</primary></indexterm><programlisting><link linkend="BonoboControl">BonoboControl</link> *     bonobo_control_construct            (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="GtkWidget">GtkWidget</link> *widget);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-get-ui-component" role="function">
<title>bonobo_control_get_ui_component ()</title>
<indexterm zone="bonobo-control-get-ui-component"><primary sortas="bonobo_control_get_ui_component">bonobo_control_get_ui_component</primary></indexterm><programlisting><link linkend="BonoboUIComponent">BonoboUIComponent</link> * bonobo_control_get_ui_component     (<link linkend="BonoboControl">BonoboControl</link> *control);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> The control
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the associated UI component
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-set-ui-component" role="function">
<title>bonobo_control_set_ui_component ()</title>
<indexterm zone="bonobo-control-set-ui-component"><primary sortas="bonobo_control_set_ui_component">bonobo_control_set_ui_component</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_set_ui_component     (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="BonoboUIComponent">BonoboUIComponent</link> *component);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-get-remote-ui-container" role="function">
<title>bonobo_control_get_remote_ui_container ()</title>
<indexterm zone="bonobo-control-get-remote-ui-container"><primary sortas="bonobo_control_get_remote_ui_container">bonobo_control_get_remote_ui_container</primary></indexterm><programlisting><link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link>  bonobo_control_get_remote_ui_container
                                                        (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> A BonoboControl object which is associated with a remote
ControlFrame.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> an optional exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The Bonobo_UIContainer CORBA server for the remote BonoboControlFrame.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-set-control-frame" role="function">
<title>bonobo_control_set_control_frame ()</title>
<indexterm zone="bonobo-control-set-control-frame"><primary sortas="bonobo_control_set_control_frame">bonobo_control_set_control_frame</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_set_control_frame    (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="Bonobo-ControlFrame">Bonobo_ControlFrame</link> control_frame,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>control_frame</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-get-control-frame" role="function">
<title>bonobo_control_get_control_frame ()</title>
<indexterm zone="bonobo-control-get-control-frame"><primary sortas="bonobo_control_get_control_frame">bonobo_control_get_control_frame</primary></indexterm><programlisting><link linkend="Bonobo-ControlFrame">Bonobo_ControlFrame</link>  bonobo_control_get_control_frame   (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> A BonoboControl object whose Bonobo_ControlFrame CORBA interface is
being retrieved.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> an optional exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The Bonobo_ControlFrame CORBA object associated with <parameter>control</parameter>, this is
a CORBA_Object_duplicated object.  You need to CORBA_Object_release it when you are
done with it.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-set-properties" role="function">
<title>bonobo_control_set_properties ()</title>
<indexterm zone="bonobo-control-set-properties"><primary sortas="bonobo_control_set_properties">bonobo_control_set_properties</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_set_properties       (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="Bonobo-PropertyBag">Bonobo_PropertyBag</link> pb,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
Binds <parameter>pb</parameter> to <parameter>control</parameter>.  When a remote object queries <parameter>control</parameter>
for its property bag, <parameter>pb</parameter> will be used in the responses.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="BonoboControl"><type>BonoboControl</type></link> object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pb</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="Bonobo-PropertyBag"><type>Bonobo_PropertyBag</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> An optional exception environment
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-get-properties" role="function">
<title>bonobo_control_get_properties ()</title>
<indexterm zone="bonobo-control-get-properties"><primary sortas="bonobo_control_get_properties">bonobo_control_get_properties</primary></indexterm><programlisting><link linkend="Bonobo-PropertyBag">Bonobo_PropertyBag</link>  bonobo_control_get_properties       (<link linkend="BonoboControl">BonoboControl</link> *control);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="BonoboControl"><type>BonoboControl</type></link> whose PropertyBag has already been set.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The <link linkend="Bonobo-PropertyBag"><type>Bonobo_PropertyBag</type></link> bound to <parameter>control</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-get-ambient-properties" role="function">
<title>bonobo_control_get_ambient_properties ()</title>
<indexterm zone="bonobo-control-get-ambient-properties"><primary sortas="bonobo_control_get_ambient_properties">bonobo_control_get_ambient_properties</primary></indexterm><programlisting><link linkend="Bonobo-PropertyBag">Bonobo_PropertyBag</link>  bonobo_control_get_ambient_properties
                                                        (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="BonoboControl"><type>BonoboControl</type></link> which is bound to a remote
<link linkend="BonoboControlFrame"><type>BonoboControlFrame</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> an optional exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="Bonobo-PropertyBag"><type>Bonobo_PropertyBag</type></link> bound to the bag of ambient
properties associated with this <link linkend="Control"><type>Control</type></link>'s <link linkend="ControlFrame"><type>ControlFrame</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-activate-notify" role="function">
<title>bonobo_control_activate_notify ()</title>
<indexterm zone="bonobo-control-activate-notify"><primary sortas="bonobo_control_activate_notify">bonobo_control_activate_notify</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_activate_notify      (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="gboolean">gboolean</link> activated,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
Notifies the remote ControlFrame which is associated with
<parameter>control</parameter> that <parameter>control</parameter> has been activated/deactivated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="BonoboControl"><type>BonoboControl</type></link> object which is bound
to a remote ControlFrame.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>activated</parameter>&#160;:</term>
<listitem><simpara> Whether or not <parameter>control</parameter> has been activated.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> An optional exception environment
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-window-id-from-x11" role="function">
<title>bonobo_control_window_id_from_x11 ()</title>
<indexterm zone="bonobo-control-window-id-from-x11"><primary sortas="bonobo_control_window_id_from_x11">bonobo_control_window_id_from_x11</primary></indexterm><programlisting><link linkend="Bonobo-Gdk-WindowId">Bonobo_Gdk_WindowId</link>  bonobo_control_window_id_from_x11  (<link linkend="guint32">guint32</link> x11_id);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x11_id</parameter>&#160;:</term>
<listitem><simpara> the x11 window id or Windows HWND.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the window id or handle as a string; free after use.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-x11-from-window-id" role="function">
<title>bonobo_control_x11_from_window_id ()</title>
<indexterm zone="bonobo-control-x11-from-window-id"><primary sortas="bonobo_control_x11_from_window_id">bonobo_control_x11_from_window_id</primary></indexterm><programlisting><link linkend="guint32">guint32</link>             bonobo_control_x11_from_window_id   (const <link linkend="CORBA-char">CORBA_char</link> *id);</programlisting>
<para>
De-mangle a window id string,
fields are separated by ':' character,
currently only the first field is used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> CORBA_char *
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the native window id.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-windowid-from-x11" role="macro">
<title>bonobo_control_windowid_from_x11()</title>
<indexterm zone="bonobo-control-windowid-from-x11"><primary sortas="bonobo_control_windowid_from_x11">bonobo_control_windowid_from_x11</primary></indexterm><programlisting>#define             bonobo_control_windowid_from_x11(a)</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-CONTROL-POPUP-BUTTON1--CAPS" role="macro">
<title>BONOBO_CONTROL_POPUP_BUTTON1</title>
<indexterm zone="BONOBO-CONTROL-POPUP-BUTTON1--CAPS"><primary sortas="BONOBO_CONTROL_POPUP_BUTTON1">BONOBO_CONTROL_POPUP_BUTTON1</primary></indexterm><programlisting>#define                     BONOBO_CONTROL_POPUP_BUTTON1           "/popups/button1"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="BONOBO-CONTROL-POPUP-BUTTON2--CAPS" role="macro">
<title>BONOBO_CONTROL_POPUP_BUTTON2</title>
<indexterm zone="BONOBO-CONTROL-POPUP-BUTTON2--CAPS"><primary sortas="BONOBO_CONTROL_POPUP_BUTTON2">BONOBO_CONTROL_POPUP_BUTTON2</primary></indexterm><programlisting>#define                     BONOBO_CONTROL_POPUP_BUTTON2           "/popups/button2"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="BONOBO-CONTROL-POPUP-BUTTON3--CAPS" role="macro">
<title>BONOBO_CONTROL_POPUP_BUTTON3</title>
<indexterm zone="BONOBO-CONTROL-POPUP-BUTTON3--CAPS"><primary sortas="BONOBO_CONTROL_POPUP_BUTTON3">BONOBO_CONTROL_POPUP_BUTTON3</primary></indexterm><programlisting>#define                     BONOBO_CONTROL_POPUP_BUTTON3           "/popups/button3"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="bonobo-control-get-popup-ui-container" role="function">
<title>bonobo_control_get_popup_ui_container ()</title>
<indexterm zone="bonobo-control-get-popup-ui-container"><primary sortas="bonobo_control_get_popup_ui_container">bonobo_control_get_popup_ui_container</primary></indexterm><programlisting><link linkend="BonoboUIContainer">BonoboUIContainer</link> * bonobo_control_get_popup_ui_container
                                                        (<link linkend="BonoboControl">BonoboControl</link> *control);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-get-popup-ui-component" role="function">
<title>bonobo_control_get_popup_ui_component ()</title>
<indexterm zone="bonobo-control-get-popup-ui-component"><primary sortas="bonobo_control_get_popup_ui_component">bonobo_control_get_popup_ui_component</primary></indexterm><programlisting><link linkend="BonoboUIComponent">BonoboUIComponent</link> * bonobo_control_get_popup_ui_component
                                                        (<link linkend="BonoboControl">BonoboControl</link> *control);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-set-popup-ui-container" role="function">
<title>bonobo_control_set_popup_ui_container ()</title>
<indexterm zone="bonobo-control-set-popup-ui-container"><primary sortas="bonobo_control_set_popup_ui_container">bonobo_control_set_popup_ui_container</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_set_popup_ui_container
                                                        (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="BonoboUIContainer">BonoboUIContainer</link> *ui_container);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ui_container</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-do-popup" role="function">
<title>bonobo_control_do_popup ()</title>
<indexterm zone="bonobo-control-do-popup"><primary sortas="bonobo_control_do_popup">bonobo_control_do_popup</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_control_do_popup             (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="guint">guint</link> button,
                                                         <link linkend="guint32">guint32</link> activate_time);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>button</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>activate_time</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-do-popup-full" role="function">
<title>bonobo_control_do_popup_full ()</title>
<indexterm zone="bonobo-control-do-popup-full"><primary sortas="bonobo_control_do_popup_full">bonobo_control_do_popup_full</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_control_do_popup_full        (<link linkend="BonoboControl">BonoboControl</link> *control,
                                                         <link linkend="GtkWidget">GtkWidget</link> *parent_menu_shell,
                                                         <link linkend="GtkWidget">GtkWidget</link> *parent_menu_item,
                                                         <link linkend="GtkMenuPositionFunc">GtkMenuPositionFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="guint">guint</link> button,
                                                         <link linkend="guint32">guint32</link> activate_time);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent_menu_shell</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent_menu_item</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>button</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>activate_time</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BonoboControlLifeCallback" role="function">
<title>BonoboControlLifeCallback ()</title>
<indexterm zone="BonoboControlLifeCallback"><primary sortas="BonoboControlLifeCallback">BonoboControlLifeCallback</primary></indexterm><programlisting><link linkend="void">void</link>                (*BonoboControlLifeCallback)        (void);</programlisting>
<para>
</para></refsect2>
<refsect2 id="bonobo-control-life-set-purge" role="function">
<title>bonobo_control_life_set_purge ()</title>
<indexterm zone="bonobo-control-life-set-purge"><primary sortas="bonobo_control_life_set_purge">bonobo_control_life_set_purge</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_life_set_purge       (long <link linkend="ms">ms</link> );</programlisting>
<para>
Set time we're prepared to wait without a ControlFrame
before terminating the Control. This can happen if the
panel activates us but crashes before the set_frame.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>Param1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-life-set-callback" role="function">
<title>bonobo_control_life_set_callback ()</title>
<indexterm zone="bonobo-control-life-set-callback"><primary sortas="bonobo_control_life_set_callback">bonobo_control_life_set_callback</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_life_set_callback    (<link linkend="BonoboControlLifeCallback">BonoboControlLifeCallback</link> all_dead_callback);</programlisting>
<para>
See <link linkend="bonobo-control-life-instrument"><type>bonobo_control_life_instrument</type></link></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>all_dead_callback</parameter>&#160;:</term>
<listitem><simpara> method to call at idle when no controls remain
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-life-instrument" role="function">
<title>bonobo_control_life_instrument ()</title>
<indexterm zone="bonobo-control-life-instrument"><primary sortas="bonobo_control_life_instrument">bonobo_control_life_instrument</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_control_life_instrument      (<link linkend="BonoboControl">BonoboControl</link> *control);</programlisting>
<para>
Request that <parameter>control</parameter> is lifecycle managed by this code;
when it (and all other registerees are dead, the
all_dead_callback set by <link linkend="bonobo-control-life-set-callback"><type>bonobo_control_life_set_callback</type></link>
will be called at idle.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> control to manage.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-control-life-get-count" role="function">
<title>bonobo_control_life_get_count ()</title>
<indexterm zone="bonobo-control-life-get-count"><primary sortas="bonobo_control_life_get_count">bonobo_control_life_get_count</primary></indexterm><programlisting><link linkend="int">int</link>                 bonobo_control_life_get_count       (void);</programlisting>
<para>
calculates the number of live controls under management.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of live controls.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="libbonoboui-bonobo-control.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="BonoboControl-activate" role="signal"><title>The <literal>&quot;activate&quot;</literal> signal</title>
<indexterm zone="BonoboControl-activate"><primary sortas="BonoboControl::activate">BonoboControl::activate</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="BonoboControl">BonoboControl</link> *bonobocontrol,
                                                        <link linkend="gboolean">gboolean</link>       arg1,
                                                        <link linkend="gpointer">gpointer</link>       user_data)          : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bonobocontrol</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="BonoboControl-disconnected" role="signal"><title>The <literal>&quot;disconnected&quot;</literal> signal</title>
<indexterm zone="BonoboControl-disconnected"><primary sortas="BonoboControl::disconnected">BonoboControl::disconnected</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="BonoboControl">BonoboControl</link> *bonobocontrol,
                                                        <link linkend="gpointer">gpointer</link>       user_data)          : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bonobocontrol</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="BonoboControl-plug-created" role="signal"><title>The <literal>&quot;plug-created&quot;</literal> signal</title>
<indexterm zone="BonoboControl-plug-created"><primary sortas="BonoboControl::plug-created">BonoboControl::plug-created</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="BonoboControl">BonoboControl</link> *bonobocontrol,
                                                        <link linkend="gpointer">gpointer</link>       user_data)          : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bonobocontrol</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="BonoboControl-set-frame" role="signal"><title>The <literal>&quot;set-frame&quot;</literal> signal</title>
<indexterm zone="BonoboControl-set-frame"><primary sortas="BonoboControl::set-frame">BonoboControl::set-frame</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="BonoboControl">BonoboControl</link> *bonobocontrol,
                                                        <link linkend="gpointer">gpointer</link>       user_data)          : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bonobocontrol</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1 id="libbonoboui-bonobo-control.see-also">
<title>See Also</title>
<para>
  <link linkend="BonoboWidget"><type>BonoboWidget</type></link>, <link linkend="bonobo-widget-new"><function>bonobo_widget_new()</function></link>
</para>
</refsect1>

</refentry>
