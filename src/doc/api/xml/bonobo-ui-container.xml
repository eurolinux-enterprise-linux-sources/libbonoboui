<refentry id="libbonoboui-bonobo-ui-container">
<refmeta>
<refentrytitle role="top_of_page" id="libbonoboui-bonobo-ui-container.top_of_page">BonoboUIContainer</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBOUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboUIContainer</refname>
<refpurpose>The container interface as implemented for BonoboWindow</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonoboui-bonobo-ui-container.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="BonoboUIContainer"/>
<synopsis>
                    <link linkend="BonoboUIContainer-struct">BonoboUIContainer</link>;
                    <link linkend="BonoboUIContainerPrivate">BonoboUIContainerPrivate</link>;
                    <link linkend="BonoboUIContainerClass">BonoboUIContainerClass</link>;
<link linkend="BonoboUIContainer">BonoboUIContainer</link> * <link linkend="bonobo-ui-container-new">bonobo_ui_container_new</link>             (void);
<link linkend="void">void</link>                <link linkend="bonobo-ui-container-set-engine">bonobo_ui_container_set_engine</link>      (<link linkend="BonoboUIContainer">BonoboUIContainer</link> *container,
                                                         <link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);
<link linkend="BonoboUIEngine">BonoboUIEngine</link> *    <link linkend="bonobo-ui-container-get-engine">bonobo_ui_container_get_engine</link>      (<link linkend="BonoboUIContainer">BonoboUIContainer</link> *container);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libbonoboui-bonobo-ui-container.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="BonoboObject">BonoboObject</link>
         +----BonoboUIContainer
</synopsis>
</refsect1>








<refsect1 id="libbonoboui-bonobo-ui-container.description" role="desc">
<title role="desc.title">Description</title>
<para>
A BonoboUIContainer is a very thin object, it implements the CORBA
interface for doing UI merging, but none of the logic. In order
to achieve the effect it is associated with a BonoboUIEngine object.
Traditionaly the UI container was associated with a <link linkend="BonoboWindow"><type>BonoboWindow</type></link>
however, this is now strongly deprecated, since the BonoboUIContainer
can be used with any <link linkend="BonoboUIEngine"><type>BonoboUIEngine</type></link>, not just that used by BonoboWindow.
</para>
<para>
Here is how your code should interact with the BonoboUIContainer
  <example>
    <title>How to setup a BonoboUIContainer</title>
    <programlisting>
{
	BonoboWindow      *window;
	BonoboUIEngine    *engine;
	BonoboUIContainer *container;
	window = BONOBO_WINDOW (
		bonobo_window_new ("Window", "My Test Application"));
	container = bonobo_ui_container_new ();
	engine = bonobo_window_get_ui_engine (window);
	bonobo_ui_container_set_engine (container, engine);
	return window;
}
    </programlisting>
  </example>
</para>
</refsect1>

<refsect1 id="libbonoboui-bonobo-ui-container.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="BonoboUIContainer-struct" role="struct">
<title>BonoboUIContainer</title>
<indexterm zone="BonoboUIContainer-struct"><primary sortas="BonoboUIContainer">BonoboUIContainer</primary></indexterm><programlisting>typedef struct _BonoboUIContainer BonoboUIContainer;</programlisting>
<para>
</para></refsect2>
<refsect2 id="BonoboUIContainerPrivate" role="struct">
<title>BonoboUIContainerPrivate</title>
<indexterm zone="BonoboUIContainerPrivate"><primary sortas="BonoboUIContainerPrivate">BonoboUIContainerPrivate</primary></indexterm><programlisting>typedef struct _BonoboUIContainerPrivate BonoboUIContainerPrivate;</programlisting>
<para>
</para></refsect2>
<refsect2 id="BonoboUIContainerClass" role="struct">
<title>BonoboUIContainerClass</title>
<indexterm zone="BonoboUIContainerClass"><primary sortas="BonoboUIContainerClass">BonoboUIContainerClass</primary></indexterm><programlisting>typedef struct {
	BonoboObjectClass parent;

	POA_Bonobo_UIContainer__epv epv;

	gpointer dummy[2];
} BonoboUIContainerClass;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="bonobo-ui-container-new" role="function">
<title>bonobo_ui_container_new ()</title>
<indexterm zone="bonobo-ui-container-new"><primary sortas="bonobo_ui_container_new">bonobo_ui_container_new</primary></indexterm><programlisting><link linkend="BonoboUIContainer">BonoboUIContainer</link> * bonobo_ui_container_new             (void);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly created BonoboUIContainer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-container-set-engine" role="function">
<title>bonobo_ui_container_set_engine ()</title>
<indexterm zone="bonobo-ui-container-set-engine"><primary sortas="bonobo_ui_container_set_engine">bonobo_ui_container_set_engine</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_container_set_engine      (<link linkend="BonoboUIContainer">BonoboUIContainer</link> *container,
                                                         <link linkend="BonoboUIEngine">BonoboUIEngine</link> *engine);</programlisting>
<para>
Associates the BonoboUIContainer with a <link linkend="BonoboUIEngine"><type>BonoboUIEngine</type></link>
that it will use to handle all the UI merging requests.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&#160;:</term>
<listitem><simpara> the container
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>engine</parameter>&#160;:</term>
<listitem><simpara> the engine
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-container-get-engine" role="function">
<title>bonobo_ui_container_get_engine ()</title>
<indexterm zone="bonobo-ui-container-get-engine"><primary sortas="bonobo_ui_container_get_engine">bonobo_ui_container_get_engine</primary></indexterm><programlisting><link linkend="BonoboUIEngine">BonoboUIEngine</link> *    bonobo_ui_container_get_engine      (<link linkend="BonoboUIContainer">BonoboUIContainer</link> *container);</programlisting>
<para>
Get the associated <link linkend="BonoboUIEngine"><type>BonoboUIEngine</type></link></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>container</parameter>&#160;:</term>
<listitem><simpara> the UI container
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the engine
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="libbonoboui-bonobo-ui-container.see-also">
<title>See Also</title>
<para>
<link linkend="BonoboUIComponent"><type>BonoboUIComponent</type></link>, <link linkend="BonoboUIEngine"><type>BonoboUIEngine</type></link>, <link linkend="BonoboWindow"><type>BonoboWindow</type></link>, <link linkend="BonoboUISync"><type>BonoboUISync</type></link>,
 <xref linkend="libbonoboui-bonobo-ui-util"/>
</para>
</refsect1>

</refentry>
