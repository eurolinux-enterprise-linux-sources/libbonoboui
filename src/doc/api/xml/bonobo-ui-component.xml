<refentry id="libbonoboui-bonobo-ui-component">
<refmeta>
<refentrytitle role="top_of_page" id="libbonoboui-bonobo-ui-component.top_of_page">BonoboUIComponent</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBOUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboUIComponent</refname>
<refpurpose>A UI interface that handles UI merging for a component</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonoboui-bonobo-ui-component.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="BonoboUIComponent"/>
<synopsis>
                    <link linkend="BonoboUIComponent-struct">BonoboUIComponent</link>;
                    <link linkend="BonoboUIComponentPrivate">BonoboUIComponentPrivate</link>;
<link linkend="void">void</link>                (<link linkend="BonoboUIListenerFn">*BonoboUIListenerFn</link>)               (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="Bonobo-UIComponent-EventType">Bonobo_UIComponent_EventType</link> type,
                                                         const <link linkend="char">char</link> *state,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                (<link linkend="BonoboUIVerbFn">*BonoboUIVerbFn</link>)                   (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         const <link linkend="char">char</link> *cname);
                    <link linkend="BonoboUIComponentClass">BonoboUIComponentClass</link>;
<link linkend="BonoboUIComponent">BonoboUIComponent</link> * <link linkend="bonobo-ui-component-construct">bonobo_ui_component_construct</link>       (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *name);
<link linkend="BonoboUIComponent">BonoboUIComponent</link> * <link linkend="bonobo-ui-component-new">bonobo_ui_component_new</link>             (const <link linkend="char">char</link> *name);
<link linkend="BonoboUIComponent">BonoboUIComponent</link> * <link linkend="bonobo-ui-component-new-default">bonobo_ui_component_new_default</link>     (void);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-set-name">bonobo_ui_component_set_name</link>        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *name);
const <link linkend="char">char</link> *        <link linkend="bonobo-ui-component-get-name">bonobo_ui_component_get_name</link>        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-set-container">bonobo_ui_component_set_container</link>   (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> container,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-unset-container">bonobo_ui_component_unset_container</link> (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link>  <link linkend="bonobo-ui-component-get-container">bonobo_ui_component_get_container</link>   (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-add-verb">bonobo_ui_component_add_verb</link>        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *cname,
                                                         <link linkend="BonoboUIVerbFn">BonoboUIVerbFn</link> fn,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-add-verb-full">bonobo_ui_component_add_verb_full</link>   (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *cname,
                                                         <link linkend="GClosure">GClosure</link> *closure);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-remove-verb">bonobo_ui_component_remove_verb</link>     (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *cname);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-remove-verb-by-closure">bonobo_ui_component_remove_verb_by_closure</link>
                                                        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="GClosure">GClosure</link> *closure);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-add-listener">bonobo_ui_component_add_listener</link>    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *id,
                                                         <link linkend="BonoboUIListenerFn">BonoboUIListenerFn</link> fn,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-add-listener-full">bonobo_ui_component_add_listener_full</link>
                                                        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *id,
                                                         <link linkend="GClosure">GClosure</link> *closure);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-remove-listener">bonobo_ui_component_remove_listener</link> (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *cname);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-remove-listener-by-closure">bonobo_ui_component_remove_listener_by_closure</link>
                                                        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="GClosure">GClosure</link> *closure);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-set">bonobo_ui_component_set</link>             (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         const <link linkend="char">char</link> *xml,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-set-translate">bonobo_ui_component_set_translate</link>   (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         const <link linkend="char">char</link> *xml,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-set-tree">bonobo_ui_component_set_tree</link>        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-rm">bonobo_ui_component_rm</link>              (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-ui-component-path-exists">bonobo_ui_component_path_exists</link>     (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="CORBA-char">CORBA_char</link> *        <link linkend="bonobo-ui-component-get">bonobo_ui_component_get</link>             (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="gboolean">gboolean</link> recurse,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="BonoboUINode">BonoboUINode</link> *      <link linkend="bonobo-ui-component-get-tree">bonobo_ui_component_get_tree</link>        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="gboolean">gboolean</link> recurse,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-object-set">bonobo_ui_component_object_set</link>      (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      <link linkend="bonobo-ui-component-object-get">bonobo_ui_component_object_get</link>      (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-widget-set">bonobo_ui_component_widget_set</link>      (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-freeze">bonobo_ui_component_freeze</link>          (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-thaw">bonobo_ui_component_thaw</link>            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-set-prop">bonobo_ui_component_set_prop</link>        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         const <link linkend="char">char</link> *prop,
                                                         const <link linkend="char">char</link> *value,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="gchar">gchar</link> *             <link linkend="bonobo-ui-component-get-prop">bonobo_ui_component_get_prop</link>        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         const <link linkend="char">char</link> *prop,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-set-status">bonobo_ui_component_set_status</link>      (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *text,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
                    <link linkend="BonoboUIVerb">BonoboUIVerb</link>;
#define             <link linkend="BONOBO-UI-VERB--CAPS">BONOBO_UI_VERB</link>                      (name,cb)
#define             <link linkend="BONOBO-UI-VERB-DATA--CAPS">BONOBO_UI_VERB_DATA</link>                 (name,cb,data)
#define             <link linkend="BONOBO-UI-UNSAFE-VERB--CAPS">BONOBO_UI_UNSAFE_VERB</link>               (name,cb)
#define             <link linkend="BONOBO-UI-UNSAFE-VERB-DATA--CAPS">BONOBO_UI_UNSAFE_VERB_DATA</link>          (name,cb,data)
#define             <link linkend="BONOBO-UI-VERB-END--CAPS">BONOBO_UI_VERB_END</link>
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-add-verb-list">bonobo_ui_component_add_verb_list</link>   (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="BonoboUIVerb">BonoboUIVerb</link> *list);
<link linkend="void">void</link>                <link linkend="bonobo-ui-component-add-verb-list-with-data">bonobo_ui_component_add_verb_list_with_data</link>
                                                        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="BonoboUIVerb">BonoboUIVerb</link> *list,
                                                         <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libbonoboui-bonobo-ui-component.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="BonoboObject">BonoboObject</link>
         +----BonoboUIComponent
</synopsis>
</refsect1>






<refsect1 id="libbonoboui-bonobo-ui-component.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="BonoboUIComponent-exec-verb">exec-verb</link>&quot;                                      : Run First
  &quot;<link linkend="BonoboUIComponent-ui-event">ui-event</link>&quot;                                       : Run First
</synopsis>
</refsect1>


<refsect1 id="libbonoboui-bonobo-ui-component.description" role="desc">
<title role="desc.title">Description</title>
<para>
The BonoboUIComponent is the client side portion of the UI merging scheme.
It should be implemented by any component that wishes to merge menus / UI.
The Component object is neccessary to receive notifications from the
associated <link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link>. Notifications come in two forms - verbs and
events. Verbs have an associated ( non translated ) name that is used to
match them with callbacks. Events have an associated ( non translated ) id
that does the same thing. Events pass a state string. Events are used for
eg. toggle buttons, Verbs are used for eg. Menu items.
</para>
<para>
Mostly you don't need to bother with creating your own BonoboUIComponent,
if you implement a Control eg. a BonoboUIComponent is created at Control
construction time and can be accessed thus:
  <example>
    <title>Using the UI Component associated with a control</title>
    <programlisting>
/*
 * For the format of the XML see bonobo/doc/xml-ui.txt
 * For a standard template to base your UI on see bonobo/doc/std-ui.xml
 */
const char my_ui_elements [] =
	"&gt;placeholder name=\"FileOps\"&lt;"
	"	&gt;menuitem name=\"Foo\" verb=\"FileFoo\" _label=\"Foo!\""
	"	 _tip=\"do some foo thing\"/&lt;"
	"&gt;/placeholder&lt;";
static void
control_activate_cb (BonoboControl *object,
                     gboolean       state,
 		     gpointer       user_data)
{
	BonoboUIComponent *ui_component;
	/* Get UIComponent from control */
	ui_component = bonobo_control_get_ui_component (control);
	if (state) /* Activate */
		bonobo_ui_component_set_translate (
			ui_component, "/menu/File", my_ui_elements, NULL);
	else /* De-activate */
		bonobo_ui_component_unset_container (ui_component);
}
static void
verb_foo_cb (BonoboUIComponent *ui_container,
             gpointer           user_data,
	     const              char *cname)
{
	BonoboControl *control = user_data;
	g_print ("FileFoo !\n");
}
static BonoboUIVerb my_ui_verbs[] = {
	BONOBO_UI_VERB ("FileFoo", verb_foo_cb),
	BONOBO_UI_VERB_END
};
BonoboObject *
create_ui_control (void)
{
	BonoboControl     *control;
	BonoboUIComponent *ui_component;
	GtkWidget         *widget;
	control = bonobo_control_new ((widget = gtk_widget_new_label ("Hello World")));
	/* Automaticaly associate the remote UIContainer for us on activate */
	bonobo_control_set_automerge (control, TRUE);
	ui_component = bonobo_control_get_ui_component (control);
	/* Register the verbs with the UI Component */
	bonobo_ui_component_add_verb_list_with_data (
		ui_component, my_ui_verbs, control);
	gtk_signal_connect (GTK_OBJECT (control), "activate",
	                    GTK_SIGNAL_FUNC (control_activate_cb), NULL);
	gtk_widget_show (widget);
	return BONOBO_OBJECT (control);
}
    </programlisting>
  </example>
This sets up the UI, associates a 'FileFoo' verb with a callback, and
on control activation merges the UI elements into a standard path
in the file menu.
</para>
<para>
There are several standard placeholders that it is important for
containers to implement, basing your UI on the doc/std-ui.xml is
a very good starting point. Also in the above example the _label
and _tip are not cmd / widget separated - for more information read
doc/ui-xml.txt.
</para>
<para>
Most applications will should not use the BonoboUIComponent in this
way, there is a <function>bonobo_ui_util_set_ui</function> that does
the translation, help menu build, insertion etc. from an installed
XML file. The above example is complete except for translation, which
is extremely important. Here is a better activate function:
  <example>
    <title>A better way to create your UI</title>
    <programlisting>
static void
control_activate_cb (BonoboControl *object,
                     gboolean       state,
		     gpointer       user_data)
{
	BonoboUIComponent *ui_component;
	/* Get UIComponent from control */
	ui_component = bonobo_control_get_ui_component (control);
	if (state) /* Activate */
		/*
		 * Use a helper function to setup your UI from a file:
		 */
		bonobo_ui_util_set_ui (
			ui_component, MY_COMPILE_TIME_PREFIX,
			"GNOME_MyApp.ui", "my-app");
	else /* De-activate */
		bonobo_ui_component_unset_container (ui_component);
}
    </programlisting>
  </example>
  In this example "GNOME_MyApp.ui" is the correctly namespaced UI
xml filename, ( see doc/NAMESPACE to register your name ), and
"my-app" is the gnome application name, from which a path to your
installed help files can be deduced.
</para>
</refsect1>

<refsect1 id="libbonoboui-bonobo-ui-component.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="BonoboUIComponent-struct" role="struct">
<title>BonoboUIComponent</title>
<indexterm zone="BonoboUIComponent-struct"><primary sortas="BonoboUIComponent">BonoboUIComponent</primary></indexterm><programlisting>typedef struct _BonoboUIComponent BonoboUIComponent;</programlisting>
<para>
</para></refsect2>
<refsect2 id="BonoboUIComponentPrivate" role="struct">
<title>BonoboUIComponentPrivate</title>
<indexterm zone="BonoboUIComponentPrivate"><primary sortas="BonoboUIComponentPrivate">BonoboUIComponentPrivate</primary></indexterm><programlisting>typedef struct _BonoboUIComponentPrivate BonoboUIComponentPrivate;</programlisting>
<para>
</para></refsect2>
<refsect2 id="BonoboUIListenerFn" role="function">
<title>BonoboUIListenerFn ()</title>
<indexterm zone="BonoboUIListenerFn"><primary sortas="BonoboUIListenerFn">BonoboUIListenerFn</primary></indexterm><programlisting><link linkend="void">void</link>                (*BonoboUIListenerFn)               (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="Bonobo-UIComponent-EventType">Bonobo_UIComponent_EventType</link> type,
                                                         const <link linkend="char">char</link> *state,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>state</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BonoboUIVerbFn" role="function">
<title>BonoboUIVerbFn ()</title>
<indexterm zone="BonoboUIVerbFn"><primary sortas="BonoboUIVerbFn">BonoboUIVerbFn</primary></indexterm><programlisting><link linkend="void">void</link>                (*BonoboUIVerbFn)                   (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         const <link linkend="char">char</link> *cname);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cname</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BonoboUIComponentClass" role="struct">
<title>BonoboUIComponentClass</title>
<indexterm zone="BonoboUIComponentClass"><primary sortas="BonoboUIComponentClass">BonoboUIComponentClass</primary></indexterm><programlisting>typedef struct {
	BonoboObjectClass          parent_class;

	POA_Bonobo_UIComponent__epv epv;

	gpointer dummy[6];

	/* Signals */
	void (*exec_verb) (BonoboUIComponent *comp,
			   const char        *cname);

	void (*ui_event)  (BonoboUIComponent *comp,
			   const char        *path,
			   Bonobo_UIComponent_EventType type,
			   const char        *state);
	/* Virtual XML Methods */
	void (*freeze)    (BonoboUIComponent *component,
			   CORBA_Environment *opt_ev);

	void (*thaw)      (BonoboUIComponent *component,
			   CORBA_Environment *opt_ev);

	void (*xml_set)   (BonoboUIComponent *component,
			   const char        *path,
			   const char        *xml,
			   CORBA_Environment *ev);

	CORBA_char *(*xml_get) (BonoboUIComponent *component,
				const char        *path,
				gboolean           recurse,
				CORBA_Environment *ev);

	void (*xml_rm)    (BonoboUIComponent *component,
			   const char        *path,
			   CORBA_Environment *ev);

	void (*set_prop)  (BonoboUIComponent *component,
			   const char        *path,
			   const char        *prop,
			   const char        *value,
			   CORBA_Environment *opt_ev);
	
	gchar *(*get_prop) (BonoboUIComponent *component,
			    const char        *path,
			    const char        *prop,
			    CORBA_Environment *opt_ev);

	gboolean (*exists) (BonoboUIComponent *component,
			    const char        *path,
			    CORBA_Environment *ev);
} BonoboUIComponentClass;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="bonobo-ui-component-construct" role="function">
<title>bonobo_ui_component_construct ()</title>
<indexterm zone="bonobo-ui-component-construct"><primary sortas="bonobo_ui_component_construct">bonobo_ui_component_construct</primary></indexterm><programlisting><link linkend="BonoboUIComponent">BonoboUIComponent</link> * bonobo_ui_component_construct       (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
Construct the UI component with name <parameter>name</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name of the UI component
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a constructed UI component or NULL on error
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-new" role="function">
<title>bonobo_ui_component_new ()</title>
<indexterm zone="bonobo-ui-component-new"><primary sortas="bonobo_ui_component_new">bonobo_ui_component_new</primary></indexterm><programlisting><link linkend="BonoboUIComponent">BonoboUIComponent</link> * bonobo_ui_component_new             (const <link linkend="char">char</link> *name);</programlisting>
<para>
Create a new UI component with the specified name</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name of the UI component
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new UI component 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-new-default" role="function">
<title>bonobo_ui_component_new_default ()</title>
<indexterm zone="bonobo-ui-component-new-default"><primary sortas="bonobo_ui_component_new_default">bonobo_ui_component_new_default</primary></indexterm><programlisting><link linkend="BonoboUIComponent">BonoboUIComponent</link> * bonobo_ui_component_new_default     (void);</programlisting>
<para>
Create a UI component with a unique default name
constructed from various available system properties.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new UI component
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-set-name" role="function">
<title>bonobo_ui_component_set_name ()</title>
<indexterm zone="bonobo-ui-component-set-name"><primary sortas="bonobo_ui_component_set_name">bonobo_ui_component_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_set_name        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
Set the <parameter>name</parameter> of the UI <parameter>component</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the UI component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the new name
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-get-name" role="function">
<title>bonobo_ui_component_get_name ()</title>
<indexterm zone="bonobo-ui-component-get-name"><primary sortas="bonobo_ui_component_get_name">bonobo_ui_component_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        bonobo_ui_component_get_name        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the UI component
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the name of the UI <parameter>component</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-set-container" role="function">
<title>bonobo_ui_component_set_container ()</title>
<indexterm zone="bonobo-ui-component-set-container"><primary sortas="bonobo_ui_component_set_container">bonobo_ui_component_set_container</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_set_container   (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link> container,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This associates this <parameter>component</parameter> with a remote <parameter>container</parameter>
object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>container</parameter>&#160;:</term>
<listitem><simpara> a remote container object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-unset-container" role="function">
<title>bonobo_ui_component_unset_container ()</title>
<indexterm zone="bonobo-ui-component-unset-container"><primary sortas="bonobo_ui_component_unset_container">bonobo_ui_component_unset_container</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_unset_container (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This dis-associates the <parameter>component</parameter> from its associated
<link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-get-container" role="function">
<title>bonobo_ui_component_get_container ()</title>
<indexterm zone="bonobo-ui-component-get-container"><primary sortas="bonobo_ui_component_get_container">bonobo_ui_component_get_container</primary></indexterm><programlisting><link linkend="Bonobo-UIContainer">Bonobo_UIContainer</link>  bonobo_ui_component_get_container   (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the associated remote container
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-add-verb" role="function">
<title>bonobo_ui_component_add_verb ()</title>
<indexterm zone="bonobo-ui-component-add-verb"><primary sortas="bonobo_ui_component_add_verb">bonobo_ui_component_add_verb</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_add_verb        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *cname,
                                                         <link linkend="BonoboUIVerbFn">BonoboUIVerbFn</link> fn,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Add a verb to the UI component, that can be invoked by
the container.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component to add it to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cname</parameter>&#160;:</term>
<listitem><simpara> the programmatic name of the verb
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fn</parameter>&#160;:</term>
<listitem><simpara> the callback function for invoking it
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the associated user data for the callback
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-add-verb-full" role="function">
<title>bonobo_ui_component_add_verb_full ()</title>
<indexterm zone="bonobo-ui-component-add-verb-full"><primary sortas="bonobo_ui_component_add_verb_full">bonobo_ui_component_add_verb_full</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_add_verb_full   (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *cname,
                                                         <link linkend="GClosure">GClosure</link> *closure);</programlisting>
<para>
Add a verb to the UI component, that can be invoked by
the container.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component to add it to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cname</parameter>&#160;:</term>
<listitem><simpara> the programmatic name of the verb
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-remove-verb" role="function">
<title>bonobo_ui_component_remove_verb ()</title>
<indexterm zone="bonobo-ui-component-remove-verb"><primary sortas="bonobo_ui_component_remove_verb">bonobo_ui_component_remove_verb</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_remove_verb     (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *cname);</programlisting>
<para>
Remove a verb by it's unique name</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component to add it to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cname</parameter>&#160;:</term>
<listitem><simpara> the programmatic name of the verb
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-remove-verb-by-closure" role="function">
<title>bonobo_ui_component_remove_verb_by_closure ()</title>
<indexterm zone="bonobo-ui-component-remove-verb-by-closure"><primary sortas="bonobo_ui_component_remove_verb_by_closure">bonobo_ui_component_remove_verb_by_closure</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_remove_verb_by_closure
                                                        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="GClosure">GClosure</link> *closure);</programlisting>
<para>
remove any verb handled by <parameter>fn</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component to add it to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-add-listener" role="function">
<title>bonobo_ui_component_add_listener ()</title>
<indexterm zone="bonobo-ui-component-add-listener"><primary sortas="bonobo_ui_component_add_listener">bonobo_ui_component_add_listener</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_add_listener    (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *id,
                                                         <link linkend="BonoboUIListenerFn">BonoboUIListenerFn</link> fn,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Add a listener for stateful events.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component to add it to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> the programmatic name of the id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fn</parameter>&#160;:</term>
<listitem><simpara> the callback function for invoking it
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the associated user data for the callback
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-add-listener-full" role="function">
<title>bonobo_ui_component_add_listener_full ()</title>
<indexterm zone="bonobo-ui-component-add-listener-full"><primary sortas="bonobo_ui_component_add_listener_full">bonobo_ui_component_add_listener_full</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_add_listener_full
                                                        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *id,
                                                         <link linkend="GClosure">GClosure</link> *closure);</programlisting>
<para>
Add a listener for stateful events.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component to add it to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> the programmatic name of the id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-remove-listener" role="function">
<title>bonobo_ui_component_remove_listener ()</title>
<indexterm zone="bonobo-ui-component-remove-listener"><primary sortas="bonobo_ui_component_remove_listener">bonobo_ui_component_remove_listener</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_remove_listener (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *cname);</programlisting>
<para>
Remove any listener by its unique id</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component to add it to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cname</parameter>&#160;:</term>
<listitem><simpara> the programmatic name of the id
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-remove-listener-by-closure" role="function">
<title>bonobo_ui_component_remove_listener_by_closure ()</title>
<indexterm zone="bonobo-ui-component-remove-listener-by-closure"><primary sortas="bonobo_ui_component_remove_listener_by_closure">bonobo_ui_component_remove_listener_by_closure</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_remove_listener_by_closure
                                                        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="GClosure">GClosure</link> *closure);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-set" role="function">
<title>bonobo_ui_component_set ()</title>
<indexterm zone="bonobo-ui-component-set"><primary sortas="bonobo_ui_component_set">bonobo_ui_component_set</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_set             (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         const <link linkend="char">char</link> *xml,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
Set the <parameter>xml</parameter> fragment into the remote <link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link>'s tree
attached to <parameter>component</parameter> at the specified <parameter>path</parameter>
</para>
<para>
If you see blank menu items ( or just separators ) it's
likely that you should be using <link linkend="bonobo-ui-component-set-translate"><type>bonobo_ui_component_set_translate</type></link>
which substantialy deprecates this routine.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>xml</parameter>&#160;:</term>
<listitem><simpara> the xml to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> the (optional) CORBA exception environment
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-set-translate" role="function">
<title>bonobo_ui_component_set_translate ()</title>
<indexterm zone="bonobo-ui-component-set-translate"><primary sortas="bonobo_ui_component_set_translate">bonobo_ui_component_set_translate</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_set_translate   (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         const <link linkend="char">char</link> *xml,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This routine parses the XML strings, and converts any:
_label="Hello World" type strings into the translated,
and encoded format expected by the remote <link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>xml</parameter>&#160;:</term>
<listitem><simpara> the non translated xml to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> the (optional) CORBA exception environment
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-set-tree" role="function">
<title>bonobo_ui_component_set_tree ()</title>
<indexterm zone="bonobo-ui-component-set-tree"><primary sortas="bonobo_ui_component_set_tree">bonobo_ui_component_set_tree</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_set_tree        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Set the <parameter>xml</parameter> fragment into the remote <link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link>'s tree
attached to <parameter>component</parameter> at the specified <parameter>path</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="BonoboUINode"><type>BonoboUINode</type></link> representation of an xml tree to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> the (optional) CORBA exception environment
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-rm" role="function">
<title>bonobo_ui_component_rm ()</title>
<indexterm zone="bonobo-ui-component-rm"><primary sortas="bonobo_ui_component_rm">bonobo_ui_component_rm</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_rm              (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This routine removes a chunk of the XML tree in the
<link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link> associated with <parameter>component</parameter> pointed
to by <parameter>path</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> the (optional) CORBA exception environment
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-path-exists" role="function">
<title>bonobo_ui_component_path_exists ()</title>
<indexterm zone="bonobo-ui-component-path-exists"><primary sortas="bonobo_ui_component_path_exists">bonobo_ui_component_path_exists</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_ui_component_path_exists     (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to set the property on
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> the (optional) CORBA exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the path exists in the container.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-get" role="function">
<title>bonobo_ui_component_get ()</title>
<indexterm zone="bonobo-ui-component-get"><primary sortas="bonobo_ui_component_get">bonobo_ui_component_get</primary></indexterm><programlisting><link linkend="CORBA-char">CORBA_char</link> *        bonobo_ui_component_get             (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="gboolean">gboolean</link> recurse,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This routine fetches a chunk of the XML tree in the
<link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link> associated with <parameter>component</parameter> pointed
to by <parameter>path</parameter>. If <parameter>recurse</parameter> then the child nodes of <parameter>path</parameter>
are returned too, otherwise they are not.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to get
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recurse</parameter>&#160;:</term>
<listitem><simpara> whether to get child nodes of <parameter>path</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> the (optional) CORBA exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an XML string (CORBA allocated)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-get-tree" role="function">
<title>bonobo_ui_component_get_tree ()</title>
<indexterm zone="bonobo-ui-component-get-tree"><primary sortas="bonobo_ui_component_get_tree">bonobo_ui_component_get_tree</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link> *      bonobo_ui_component_get_tree        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="gboolean">gboolean</link> recurse,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This routine fetches a chunk of the XML tree in the
<link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link> associated with <parameter>component</parameter> pointed
to by <parameter>path</parameter>. If <parameter>recurse</parameter> then the child nodes of <parameter>path</parameter>
are returned too, otherwise they are not.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to get
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recurse</parameter>&#160;:</term>
<listitem><simpara> whether to get child nodes of <parameter>path</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> the (optional) CORBA exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an <link linkend="BonoboUINode"><type>BonoboUINode</type></link> XML representation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-object-set" role="function">
<title>bonobo_ui_component_object_set ()</title>
<indexterm zone="bonobo-ui-component-object-set"><primary sortas="bonobo_ui_component_object_set">bonobo_ui_component_object_set</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_object_set      (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> control,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This registers the <parameter>control</parameter> CORBA object into the
<link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link> associated with this <parameter>component</parameter> at
the specified <parameter>path</parameter>. This is most often used to associate
controls with a certain path.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>control</parameter>&#160;:</term>
<listitem><simpara> a CORBA object reference
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> the (optional) CORBA exception environment
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-object-get" role="function">
<title>bonobo_ui_component_object_get ()</title>
<indexterm zone="bonobo-ui-component-object-get"><primary sortas="bonobo_ui_component_object_get">bonobo_ui_component_object_get</primary></indexterm><programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      bonobo_ui_component_object_get      (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This returns the <parameter>control</parameter> CORBA object registered with the
<link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link> associated with this <parameter>component</parameter> at
the specified <parameter>path</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to set
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the associated remote CORBA object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-widget-set" role="function">
<title>bonobo_ui_component_widget_set ()</title>
<indexterm zone="bonobo-ui-component-widget-set"><primary sortas="bonobo_ui_component_widget_set">bonobo_ui_component_widget_set</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_widget_set      (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         <link linkend="GtkWidget">GtkWidget</link> *widget,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>widget</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-freeze" role="function">
<title>bonobo_ui_component_freeze ()</title>
<indexterm zone="bonobo-ui-component-freeze"><primary sortas="bonobo_ui_component_freeze">bonobo_ui_component_freeze</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_freeze          (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This increments the freeze count on the associated
<link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link>, (if not already frozen) this means that
a batch of update operations can be performed without a
re-render penalty per update.
</para>
<para>
NB. if your GUI is frozen / not updating you probably have a
freeze / thaw reference leak/</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-thaw" role="function">
<title>bonobo_ui_component_thaw ()</title>
<indexterm zone="bonobo-ui-component-thaw"><primary sortas="bonobo_ui_component_thaw">bonobo_ui_component_thaw</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_thaw            (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This decrements the freeze count on the remote associated
<link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link>, (if frozen). This means that a batch
of update operations can be performed without a re-render
penalty per update.
</para>
<para>
NB. if your GUI is frozen / not updating you probably have a
freeze / thaw reference leak/</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-set-prop" role="function">
<title>bonobo_ui_component_set_prop ()</title>
<indexterm zone="bonobo-ui-component-set-prop"><primary sortas="bonobo_ui_component_set_prop">bonobo_ui_component_set_prop</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_set_prop        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         const <link linkend="char">char</link> *prop,
                                                         const <link linkend="char">char</link> *value,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This helper function sets an XML property ( or attribute )
on the XML node pointed at by <parameter>path</parameter>. It does this by
a read / modify / write process. If you find yourself
doing this a lot, you need to consider batching this process.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to set the property on
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prop</parameter>&#160;:</term>
<listitem><simpara> the property name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> the property value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> the (optional) CORBA exception environment
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-get-prop" role="function">
<title>bonobo_ui_component_get_prop ()</title>
<indexterm zone="bonobo-ui-component-get-prop"><primary sortas="bonobo_ui_component_get_prop">bonobo_ui_component_get_prop</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             bonobo_ui_component_get_prop        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *path,
                                                         const <link linkend="char">char</link> *prop,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This helper function fetches an XML property ( or attribute )
from the XML node pointed at by <parameter>path</parameter> in the <link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link>
associated with <parameter>component</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara> the path to set the property on
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prop</parameter>&#160;:</term>
<listitem><simpara> the property name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> the (optional) CORBA exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the xml property value or NULL - free with g_free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-set-status" role="function">
<title>bonobo_ui_component_set_status ()</title>
<indexterm zone="bonobo-ui-component-set-status"><primary sortas="bonobo_ui_component_set_status">bonobo_ui_component_set_status</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_set_status      (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="char">char</link> *text,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This sets the contents of the status bar to <parameter>text</parameter> in the
remote <link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link> associated with <parameter>component</parameter>.
This is done by setting the contents of the /status/main
node.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&#160;:</term>
<listitem><simpara> the new status text
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BonoboUIVerb" role="struct">
<title>BonoboUIVerb</title>
<indexterm zone="BonoboUIVerb"><primary sortas="BonoboUIVerb">BonoboUIVerb</primary></indexterm><programlisting>typedef struct {
	const char    *cname;
	BonoboUIVerbFn cb;
	gpointer       user_data;
	gpointer       dummy;
} BonoboUIVerb;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="BONOBO-UI-VERB--CAPS" role="macro">
<title>BONOBO_UI_VERB()</title>
<indexterm zone="BONOBO-UI-VERB--CAPS"><primary sortas="BONOBO_UI_VERB">BONOBO_UI_VERB</primary></indexterm><programlisting>#define BONOBO_UI_VERB(name,cb)                  { (name), (cb), NULL   }
</programlisting>
<para>
This declares and fills a BonoboUIVerb structure suitable for
use in constructing a lost of verbs to add with
bonobo_ui_component_add_verb_list_with_data.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the verb name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara>the callback function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-UI-VERB-DATA--CAPS" role="macro">
<title>BONOBO_UI_VERB_DATA()</title>
<indexterm zone="BONOBO-UI-VERB-DATA--CAPS"><primary sortas="BONOBO_UI_VERB_DATA">BONOBO_UI_VERB_DATA</primary></indexterm><programlisting>#define BONOBO_UI_VERB_DATA(name,cb,data)        { (name), (cb), (data) }
</programlisting>
<para>
This declares and fills a BonoboUIVerb structure suitable for
use in constructing a lost of verbs to add with
bonobo_ui_component_add_verb_list.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the verb name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara>the callback function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>some associated user_data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-UI-UNSAFE-VERB--CAPS" role="macro">
<title>BONOBO_UI_UNSAFE_VERB()</title>
<indexterm zone="BONOBO-UI-UNSAFE-VERB--CAPS"><primary sortas="BONOBO_UI_UNSAFE_VERB">BONOBO_UI_UNSAFE_VERB</primary></indexterm><programlisting>#define BONOBO_UI_UNSAFE_VERB(name,cb)           { (name), ((BonoboUIVerbFn)(cb)), NULL   }
</programlisting>
<para>
As BONOBO_UI_VERB, but unsafely casts <parameter>cb</parameter> to the correct type
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the verb name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara>the callback function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-UI-UNSAFE-VERB-DATA--CAPS" role="macro">
<title>BONOBO_UI_UNSAFE_VERB_DATA()</title>
<indexterm zone="BONOBO-UI-UNSAFE-VERB-DATA--CAPS"><primary sortas="BONOBO_UI_UNSAFE_VERB_DATA">BONOBO_UI_UNSAFE_VERB_DATA</primary></indexterm><programlisting>#define BONOBO_UI_UNSAFE_VERB_DATA(name,cb,data) { (name), ((BonoboUIVerbFn)(cb)), (data) }
</programlisting>
<para>
As BONOBO_UI_VERB_DATA, but unsafely casts <parameter>cb</parameter> to the correct type
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the verb name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara>the callback function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>some associated user_data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-UI-VERB-END--CAPS" role="macro">
<title>BONOBO_UI_VERB_END</title>
<indexterm zone="BONOBO-UI-VERB-END--CAPS"><primary sortas="BONOBO_UI_VERB_END">BONOBO_UI_VERB_END</primary></indexterm><programlisting>#define BONOBO_UI_VERB_END                       { NULL, NULL, NULL }
</programlisting>
<para>
The terminator BonoboUIVerb structure for a list of BonoboUIVerbs.
</para></refsect2>
<refsect2 id="bonobo-ui-component-add-verb-list" role="function">
<title>bonobo_ui_component_add_verb_list ()</title>
<indexterm zone="bonobo-ui-component-add-verb-list"><primary sortas="bonobo_ui_component_add_verb_list">bonobo_ui_component_add_verb_list</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_add_verb_list   (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="BonoboUIVerb">BonoboUIVerb</link> *list);</programlisting>
<para>
Add a list of verbs with no associated user_data, you probably
want <link linkend="bonobo-ui-component-add-verb-list-with-data"><type>bonobo_ui_component_add_verb_list_with_data</type></link></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara> the list of verbs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-component-add-verb-list-with-data" role="function">
<title>bonobo_ui_component_add_verb_list_with_data ()</title>
<indexterm zone="bonobo-ui-component-add-verb-list-with-data"><primary sortas="bonobo_ui_component_add_verb_list_with_data">bonobo_ui_component_add_verb_list_with_data</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_component_add_verb_list_with_data
                                                        (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *component,
                                                         const <link linkend="BonoboUIVerb">BonoboUIVerb</link> *list,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
This is a helper function to save registering verbs individualy
it allows registration of a great batch of verbs at one time
in a list of <link linkend="BonoboUIVerb"><type>BonoboUIVerb</type></link> terminated by <link linkend="BONOBO-UI-VERB-END--CAPS"><type>BONOBO_UI_VERB_END</type></link></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>component</parameter>&#160;:</term>
<listitem><simpara> the component
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara> the list of verbs
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the user data passed to the verb callbacks
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="libbonoboui-bonobo-ui-component.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="BonoboUIComponent-exec-verb" role="signal"><title>The <literal>&quot;exec-verb&quot;</literal> signal</title>
<indexterm zone="BonoboUIComponent-exec-verb"><primary sortas="BonoboUIComponent::exec-verb">BonoboUIComponent::exec-verb</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *bonobouicomponent,
                                                        <link linkend="gchar">gchar</link>             *arg1,
                                                        <link linkend="gpointer">gpointer</link>           user_data)              : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bonobouicomponent</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="BonoboUIComponent-ui-event" role="signal"><title>The <literal>&quot;ui-event&quot;</literal> signal</title>
<indexterm zone="BonoboUIComponent-ui-event"><primary sortas="BonoboUIComponent::ui-event">BonoboUIComponent::ui-event</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="BonoboUIComponent">BonoboUIComponent</link> *bonobouicomponent,
                                                        <link linkend="gchar">gchar</link>             *arg1,
                                                        <link linkend="gint">gint</link>               arg2,
                                                        <link linkend="gchar">gchar</link>             *arg3,
                                                        <link linkend="gpointer">gpointer</link>           user_data)              : Run First</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bonobouicomponent</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg3</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1 id="libbonoboui-bonobo-ui-component.see-also">
<title>See Also</title>
<para>
<link linkend="BonoboUIContainer"><type>BonoboUIContainer</type></link>, <xref linkend="libbonoboui-bonobo-ui-util"/>, <link linkend="BonoboControl"><type>BonoboControl</type></link>
</para>
</refsect1>

</refentry>
