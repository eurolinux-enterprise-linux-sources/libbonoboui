<refentry id="libbonoboui-bonobo-ui-node">
<refmeta>
<refentrytitle role="top_of_page" id="libbonoboui-bonobo-ui-node.top_of_page">bonobo-ui-node</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBOUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-ui-node</refname>
<refpurpose>Simplified XML Node manipulation API</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonoboui-bonobo-ui-node.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="BonoboUINode">BonoboUINode</link>;
<link linkend="BonoboUINode">BonoboUINode</link> *      <link linkend="bonobo-ui-node-new">bonobo_ui_node_new</link>                  (const <link linkend="char">char</link> *name);
<link linkend="BonoboUINode">BonoboUINode</link> *      <link linkend="bonobo-ui-node-new-child">bonobo_ui_node_new_child</link>            (<link linkend="BonoboUINode">BonoboUINode</link> *parent,
                                                         const <link linkend="char">char</link> *name);
<link linkend="BonoboUINode">BonoboUINode</link> *      <link linkend="bonobo-ui-node-copy">bonobo_ui_node_copy</link>                 (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         <link linkend="gboolean">gboolean</link> recursive);
<link linkend="void">void</link>                <link linkend="bonobo-ui-node-free">bonobo_ui_node_free</link>                 (<link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="void">void</link>                <link linkend="bonobo-ui-node-set-data">bonobo_ui_node_set_data</link>             (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="gpointer">gpointer</link>            <link linkend="bonobo-ui-node-get-data">bonobo_ui_node_get_data</link>             (<link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="void">void</link>                <link linkend="bonobo-ui-node-set-attr">bonobo_ui_node_set_attr</link>             (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         const <link linkend="char">char</link> *name,
                                                         const <link linkend="char">char</link> *value);
<link linkend="char">char</link> *              <link linkend="bonobo-ui-node-get-attr">bonobo_ui_node_get_attr</link>             (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         const <link linkend="char">char</link> *name);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-ui-node-has-attr">bonobo_ui_node_has_attr</link>             (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         const <link linkend="char">char</link> *name);
<link linkend="void">void</link>                <link linkend="bonobo-ui-node-remove-attr">bonobo_ui_node_remove_attr</link>          (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         const <link linkend="char">char</link> *name);
<link linkend="void">void</link>                <link linkend="bonobo-ui-node-add-child">bonobo_ui_node_add_child</link>            (<link linkend="BonoboUINode">BonoboUINode</link> *parent,
                                                         <link linkend="BonoboUINode">BonoboUINode</link> *child);
<link linkend="void">void</link>                <link linkend="bonobo-ui-node-insert-before">bonobo_ui_node_insert_before</link>        (<link linkend="BonoboUINode">BonoboUINode</link> *after,
                                                         <link linkend="BonoboUINode">BonoboUINode</link> *new_before);
<link linkend="void">void</link>                <link linkend="bonobo-ui-node-unlink">bonobo_ui_node_unlink</link>               (<link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="void">void</link>                <link linkend="bonobo-ui-node-replace">bonobo_ui_node_replace</link>              (<link linkend="BonoboUINode">BonoboUINode</link> *old_node,
                                                         <link linkend="BonoboUINode">BonoboUINode</link> *new_node);
<link linkend="void">void</link>                <link linkend="bonobo-ui-node-set-content">bonobo_ui_node_set_content</link>          (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         const <link linkend="char">char</link> *content);
<link linkend="char">char</link> *              <link linkend="bonobo-ui-node-get-content">bonobo_ui_node_get_content</link>          (<link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="BonoboUINode">BonoboUINode</link> *      <link linkend="bonobo-ui-node-next">bonobo_ui_node_next</link>                 (<link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="BonoboUINode">BonoboUINode</link> *      <link linkend="bonobo-ui-node-prev">bonobo_ui_node_prev</link>                 (<link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="BonoboUINode">BonoboUINode</link> *      <link linkend="bonobo-ui-node-children">bonobo_ui_node_children</link>             (<link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="BonoboUINode">BonoboUINode</link> *      <link linkend="bonobo-ui-node-parent">bonobo_ui_node_parent</link>               (<link linkend="BonoboUINode">BonoboUINode</link> *node);
const <link linkend="char">char</link> *        <link linkend="bonobo-ui-node-get-name">bonobo_ui_node_get_name</link>             (<link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-ui-node-has-name">bonobo_ui_node_has_name</link>             (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         const <link linkend="char">char</link> *name);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-ui-node-transparent">bonobo_ui_node_transparent</link>          (<link linkend="BonoboUINode">BonoboUINode</link> *node);
<link linkend="void">void</link>                <link linkend="bonobo-ui-node-copy-attrs">bonobo_ui_node_copy_attrs</link>           (const <link linkend="BonoboUINode">BonoboUINode</link> *src,
                                                         <link linkend="BonoboUINode">BonoboUINode</link> *dest);
<link linkend="void">void</link>                <link linkend="bonobo-ui-node-free-string">bonobo_ui_node_free_string</link>          (<link linkend="char">char</link> *str);
<link linkend="void">void</link>                <link linkend="bonobo-ui-node-strip">bonobo_ui_node_strip</link>                (<link linkend="BonoboUINode">BonoboUINode</link> **node);
<link linkend="char">char</link> *              <link linkend="bonobo-ui-node-to-string">bonobo_ui_node_to_string</link>            (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         <link linkend="gboolean">gboolean</link> recurse);
<link linkend="BonoboUINode">BonoboUINode</link>*       <link linkend="bonobo-ui-node-from-string">bonobo_ui_node_from_string</link>          (const <link linkend="char">char</link> *str);
<link linkend="BonoboUINode">BonoboUINode</link>*       <link linkend="bonobo-ui-node-from-file">bonobo_ui_node_from_file</link>            (const <link linkend="char">char</link> *filename);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libbonoboui-bonobo-ui-node.description" role="desc">
<title role="desc.title">Description</title>
<para>
  The BonoboUINode API is designed to make XML node manipulation
simple, and to hide the underlying implementation of the XML tree.
This is to allow the use of some more efficient internal representation
than libxml's at some later date.
</para>
</refsect1>

<refsect1 id="libbonoboui-bonobo-ui-node.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="BonoboUINode" role="struct">
<title>BonoboUINode</title>
<indexterm zone="BonoboUINode"><primary sortas="BonoboUINode">BonoboUINode</primary></indexterm><programlisting>typedef struct _BonoboUINode BonoboUINode;</programlisting>
<para>
The BonoboUINode structure is fully opaque to stop any code
depending on libxml inadvertantly.
</para></refsect2>
<refsect2 id="bonobo-ui-node-new" role="function">
<title>bonobo_ui_node_new ()</title>
<indexterm zone="bonobo-ui-node-new"><primary sortas="bonobo_ui_node_new">bonobo_ui_node_new</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link> *      bonobo_ui_node_new                  (const <link linkend="char">char</link> *name);</programlisting>
<para>
Creates a new node with name <parameter>name</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> The name for the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new node pointer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-new-child" role="function">
<title>bonobo_ui_node_new_child ()</title>
<indexterm zone="bonobo-ui-node-new-child"><primary sortas="bonobo_ui_node_new_child">bonobo_ui_node_new_child</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link> *      bonobo_ui_node_new_child            (<link linkend="BonoboUINode">BonoboUINode</link> *parent,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
Create a new node as a child of <parameter>parent</parameter> with name <parameter>name</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&#160;:</term>
<listitem><simpara> the parent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name of the new child
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to the new child
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-copy" role="function">
<title>bonobo_ui_node_copy ()</title>
<indexterm zone="bonobo-ui-node-copy"><primary sortas="bonobo_ui_node_copy">bonobo_ui_node_copy</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link> *      bonobo_ui_node_copy                 (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         <link linkend="gboolean">gboolean</link> recursive);</programlisting>
<para>
Copy an XML node, if <parameter>recursive</parameter> do a deep copy, otherwise just dup the node itself.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recursive</parameter>&#160;:</term>
<listitem><simpara> whether to dup children too.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a copy of the noce
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-free" role="function">
<title>bonobo_ui_node_free ()</title>
<indexterm zone="bonobo-ui-node-free"><primary sortas="bonobo_ui_node_free">bonobo_ui_node_free</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_node_free                 (<link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
Frees the memory associated with the <parameter>node</parameter> and unlink it from the tree</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> a node.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-set-data" role="function">
<title>bonobo_ui_node_set_data ()</title>
<indexterm zone="bonobo-ui-node-set-data"><primary sortas="bonobo_ui_node_set_data">bonobo_ui_node_set_data</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_node_set_data             (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Associates some user data with the node pointer</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> user data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-get-data" role="function">
<title>bonobo_ui_node_get_data ()</title>
<indexterm zone="bonobo-ui-node-get-data"><primary sortas="bonobo_ui_node_get_data">bonobo_ui_node_get_data</primary></indexterm><programlisting><link linkend="gpointer">gpointer</link>            bonobo_ui_node_get_data             (<link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
Gets user data associated with <parameter>node</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the user data, see bonobo_ui_node_set_data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-set-attr" role="function">
<title>bonobo_ui_node_set_attr ()</title>
<indexterm zone="bonobo-ui-node-set-attr"><primary sortas="bonobo_ui_node_set_attr">bonobo_ui_node_set_attr</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_node_set_attr             (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         const <link linkend="char">char</link> *name,
                                                         const <link linkend="char">char</link> *value);</programlisting>
<para>
Set the attribute of <parameter>name</parameter> on <parameter>node</parameter> to <parameter>value</parameter> overriding any
previous values of that attr.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> The node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name of the attr
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> the value for the attr
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-get-attr" role="function">
<title>bonobo_ui_node_get_attr ()</title>
<indexterm zone="bonobo-ui-node-get-attr"><primary sortas="bonobo_ui_node_get_attr">bonobo_ui_node_get_attr</primary></indexterm><programlisting><link linkend="char">char</link> *              bonobo_ui_node_get_attr             (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
Fetch the value of an attr of name <parameter>name</parameter> from <parameter>node</parameter>
see also: bonobo_ui_node_free_string</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name of the attr to get
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the attr text.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-has-attr" role="function">
<title>bonobo_ui_node_has_attr ()</title>
<indexterm zone="bonobo-ui-node-has-attr"><primary sortas="bonobo_ui_node_has_attr">bonobo_ui_node_has_attr</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_ui_node_has_attr             (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
Determines whether the <parameter>node</parameter> has an attribute of name <parameter>name</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name of the attr to detect
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the attr exists
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-remove-attr" role="function">
<title>bonobo_ui_node_remove_attr ()</title>
<indexterm zone="bonobo-ui-node-remove-attr"><primary sortas="bonobo_ui_node_remove_attr">bonobo_ui_node_remove_attr</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_node_remove_attr          (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
remove any attribute with name <parameter>name</parameter> from <parameter>node</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> name of the attribute
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-add-child" role="function">
<title>bonobo_ui_node_add_child ()</title>
<indexterm zone="bonobo-ui-node-add-child"><primary sortas="bonobo_ui_node_add_child">bonobo_ui_node_add_child</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_node_add_child            (<link linkend="BonoboUINode">BonoboUINode</link> *parent,
                                                         <link linkend="BonoboUINode">BonoboUINode</link> *child);</programlisting>
<para>
Add a <parameter>child</parameter> node to the <parameter>parent</parameter> node ( after the other children )</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>parent</parameter>&#160;:</term>
<listitem><simpara> the parent
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&#160;:</term>
<listitem><simpara> the new child
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-insert-before" role="function">
<title>bonobo_ui_node_insert_before ()</title>
<indexterm zone="bonobo-ui-node-insert-before"><primary sortas="bonobo_ui_node_insert_before">bonobo_ui_node_insert_before</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_node_insert_before        (<link linkend="BonoboUINode">BonoboUINode</link> *after,
                                                         <link linkend="BonoboUINode">BonoboUINode</link> *new_before);</programlisting>
<para>
Insert a <parameter>sibling</parameter> before <parameter>prev_sibling</parameter> in a node list</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>after</parameter>&#160;:</term>
<listitem><simpara> the placeholder for insertion
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_before</parameter>&#160;:</term>
<listitem><simpara> the node to insert
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-unlink" role="function">
<title>bonobo_ui_node_unlink ()</title>
<indexterm zone="bonobo-ui-node-unlink"><primary sortas="bonobo_ui_node_unlink">bonobo_ui_node_unlink</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_node_unlink               (<link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
Unlink <parameter>node</parameter> from its tree, ie. disassociate it with its parent</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-replace" role="function">
<title>bonobo_ui_node_replace ()</title>
<indexterm zone="bonobo-ui-node-replace"><primary sortas="bonobo_ui_node_replace">bonobo_ui_node_replace</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_node_replace              (<link linkend="BonoboUINode">BonoboUINode</link> *old_node,
                                                         <link linkend="BonoboUINode">BonoboUINode</link> *new_node);</programlisting>
<para>
Replace <parameter>old_node</parameter> with <parameter>new_node</parameter> in the tree. <parameter>old_node</parameter> is
left unlinked and floating with its children.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>old_node</parameter>&#160;:</term>
<listitem><simpara> node to be replaced
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_node</parameter>&#160;:</term>
<listitem><simpara> node to replace with
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-set-content" role="function">
<title>bonobo_ui_node_set_content ()</title>
<indexterm zone="bonobo-ui-node-set-content"><primary sortas="bonobo_ui_node_set_content">bonobo_ui_node_set_content</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_node_set_content          (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         const <link linkend="char">char</link> *content);</programlisting>
<para>
Set the textual content of <parameter>node</parameter> to <parameter>content</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>content</parameter>&#160;:</term>
<listitem><simpara> the new content
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-get-content" role="function">
<title>bonobo_ui_node_get_content ()</title>
<indexterm zone="bonobo-ui-node-get-content"><primary sortas="bonobo_ui_node_get_content">bonobo_ui_node_get_content</primary></indexterm><programlisting><link linkend="char">char</link> *              bonobo_ui_node_get_content          (<link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
see also: bonobo_ui_node_free_string</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the content of <parameter>node</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-next" role="function">
<title>bonobo_ui_node_next ()</title>
<indexterm zone="bonobo-ui-node-next"><primary sortas="bonobo_ui_node_next">bonobo_ui_node_next</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link> *      bonobo_ui_node_next                 (<link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the node after <parameter>node</parameter> in the list
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-prev" role="function">
<title>bonobo_ui_node_prev ()</title>
<indexterm zone="bonobo-ui-node-prev"><primary sortas="bonobo_ui_node_prev">bonobo_ui_node_prev</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link> *      bonobo_ui_node_prev                 (<link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the node after <parameter>node</parameter> in the list
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-children" role="function">
<title>bonobo_ui_node_children ()</title>
<indexterm zone="bonobo-ui-node-children"><primary sortas="bonobo_ui_node_children">bonobo_ui_node_children</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link> *      bonobo_ui_node_children             (<link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the first child of <parameter>node</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-parent" role="function">
<title>bonobo_ui_node_parent ()</title>
<indexterm zone="bonobo-ui-node-parent"><primary sortas="bonobo_ui_node_parent">bonobo_ui_node_parent</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link> *      bonobo_ui_node_parent               (<link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the parent node of <parameter>node</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-get-name" role="function">
<title>bonobo_ui_node_get_name ()</title>
<indexterm zone="bonobo-ui-node-get-name"><primary sortas="bonobo_ui_node_get_name">bonobo_ui_node_get_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        bonobo_ui_node_get_name             (<link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the name of <parameter>node</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-has-name" role="function">
<title>bonobo_ui_node_has_name ()</title>
<indexterm zone="bonobo-ui-node-has-name"><primary sortas="bonobo_ui_node_has_name">bonobo_ui_node_has_name</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_ui_node_has_name             (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> a name the node might have
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if <parameter>node</parameter> has name == <parameter>name</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-transparent" role="function">
<title>bonobo_ui_node_transparent ()</title>
<indexterm zone="bonobo-ui-node-transparent"><primary sortas="bonobo_ui_node_transparent">bonobo_ui_node_transparent</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_ui_node_transparent          (<link linkend="BonoboUINode">BonoboUINode</link> *node);</programlisting>
<para>
Determines whether <parameter>node</parameter> is transparent. A node is
transparent if it has no content and either no attributes
or a single 'name' attribute.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if transparent
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-copy-attrs" role="function">
<title>bonobo_ui_node_copy_attrs ()</title>
<indexterm zone="bonobo-ui-node-copy-attrs"><primary sortas="bonobo_ui_node_copy_attrs">bonobo_ui_node_copy_attrs</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_node_copy_attrs           (const <link linkend="BonoboUINode">BonoboUINode</link> *src,
                                                         <link linkend="BonoboUINode">BonoboUINode</link> *dest);</programlisting>
<para>
This function copies all the attributes from <parameter>src</parameter> to <parameter>dest</parameter>
effectively cloning the <parameter>src</parameter> node as <parameter>dest</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara> the attr source node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dest</parameter>&#160;:</term>
<listitem><simpara> where to dump the attrs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-free-string" role="function">
<title>bonobo_ui_node_free_string ()</title>
<indexterm zone="bonobo-ui-node-free-string"><primary sortas="bonobo_ui_node_free_string">bonobo_ui_node_free_string</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_node_free_string          (<link linkend="char">char</link> *str);</programlisting>
<para>
Frees a string returned by any of the get routines.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&#160;:</term>
<listitem><simpara> the string to free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-strip" role="function">
<title>bonobo_ui_node_strip ()</title>
<indexterm zone="bonobo-ui-node-strip"><primary sortas="bonobo_ui_node_strip">bonobo_ui_node_strip</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_ui_node_strip                (<link linkend="BonoboUINode">BonoboUINode</link> **node);</programlisting>
<para>
A compat function for legacy reasons.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> a pointer to the node's pointer
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-to-string" role="function">
<title>bonobo_ui_node_to_string ()</title>
<indexterm zone="bonobo-ui-node-to-string"><primary sortas="bonobo_ui_node_to_string">bonobo_ui_node_to_string</primary></indexterm><programlisting><link linkend="char">char</link> *              bonobo_ui_node_to_string            (<link linkend="BonoboUINode">BonoboUINode</link> *node,
                                                         <link linkend="gboolean">gboolean</link> recurse);</programlisting>
<para>
Convert the node to its XML string representation.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> the node tree
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recurse</parameter>&#160;:</term>
<listitem><simpara> whether to dump its children as well
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the string representation or NULL on error
Use g_free to free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-from-string" role="function">
<title>bonobo_ui_node_from_string ()</title>
<indexterm zone="bonobo-ui-node-from-string"><primary sortas="bonobo_ui_node_from_string">bonobo_ui_node_from_string</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link>*       bonobo_ui_node_from_string          (const <link linkend="char">char</link> *str);</programlisting>
<para>
Parses a string into an XML tree</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the xml tree.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-ui-node-from-file" role="function">
<title>bonobo_ui_node_from_file ()</title>
<indexterm zone="bonobo-ui-node-from-file"><primary sortas="bonobo_ui_node_from_file">bonobo_ui_node_from_file</primary></indexterm><programlisting><link linkend="BonoboUINode">BonoboUINode</link>*       bonobo_ui_node_from_file            (const <link linkend="char">char</link> *filename);</programlisting>
<para>
Loads and parses the filename into an XML tree</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the xml tree.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="libbonoboui-bonobo-ui-node.see-also">
<title>See Also</title>
<para>
  <link linkend="BonoboUIComponent"><type>BonoboUIComponent</type></link>, <link linkend="bonobo-ui-util"><type>bonobo-ui-util</type></link>
</para>
</refsect1>

</refentry>
